options {
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */

package com.polloenpelotas.AnalizadorJCC;;

public class Gramatica {
}

PARSER_END(Gramatica)


/**********************************************************
                            Lexico
***********************************************************/
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
    | <"#" (~["\n", "\r"])*>
    | <"#*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "#">
}

TOKEN : {
    <numero: (["0"-"9"])+>
    | <decimal: (["0"-"9"])+"."(["0"-"9"])+>
    | <pcoma: ";">
    | <apar: "(">
    | <cpar: ")">
    | <acor: "[">
    | <ccor: "]">
    | <alla: "{">
    | <clla: "}">
    | <mas: "+">
    | <menos: "-">
    | <por: "*">
    | <div: "/">
    | <modular: "%%">
    | <pot: "^">
    | <igual: "=">
    | <menorQue: "<">
    | <mayorQue: ">">
    | <menorIgualQue: "<=">
    | <mayorIgualQue: ">=">
    | <igualQue: "==">
    | <difQue: "!=">
    | <and: "&">
    | <or: "|">
    | <not: "!" >

    | <print: "print">
    | <identifier: (["a"-"z","A"-"Z"]|["."]["a"-"z","A"-"Z"]) ( ["a"-"z","A"-"Z", "_"] | ["0"-"9"] )* >

}

/**********************************************************
*Faltaria agregar los caracteres de escape de las cadenas *
***********************************************************/

MORE :{
     "\"" :STRING_STATE
}

<STRING_STATE> MORE:
{
    <~["\""]>
}


<STRING_STATE> TOKEN:
{
   <STRING:"\""> : DEFAULT
}

/**********************************************************
                        Fin lexico
***********************************************************/


/**********************************************************
            ProducciÃ³n inicial
            Analizar -> (Instruccion)+ EOF
**********************************************************/

void Analizar() :
{}
{
  (Instruccion())+ <EOF>
}


/**********************************************************
            Instruccion -> Asignacion
                        |Imprimir;
***********************************************************/

void Instruccion() :
{}
{
    Asignacion()
    |Imprimir()
}
/**********************************************************
           Asignacion = EXP = EXP
           Imprimir = print (Exp)
***********************************************************/
void Asignacion():
{}
{
    Primitivos() <igual> Exp() (<pcoma>)?
}

void Imprimir():
{}
{
    <print> <apar> Exp() <cpar> (<pcoma>)?
}

/**********************************************************
            Exp -> exp or exp
***********************************************************/
void Exp():
{}
{
    ExpAnd()(
        <or> ExpAnd()
    )*
}


/**********************************************************
            ExpAnd -> exp and exp
***********************************************************/
void ExpAnd():
{}
{
    ExpIgualdad()(
        <and> ExpIgualdad()
    )*
}


/**********************************************************
            ExpIgualdad -> exp == exp
                        |exp !=exp;
***********************************************************/

void ExpIgualdad():
{}
{
    ExpRelacional()(
        <igualQue> ExpRelacional()
        <difQue> ExpRelacional()
    )*
}


/**********************************************************
            ExpRelacional -> exp > exp
                        |exp < exp;
***********************************************************/
void ExpRelacional():
{}
{
    ExpSumaResta()(
        <mayorQue> ExpSumaResta()
        |<menorQue> ExpSumaResta()
        |<mayorIgualQue> ExpSumaResta()
        |<menorIgualQue> ExpSumaResta()

    )*
}



/**********************************************************
            ExpSumaResta -> exp-exp
                        |exp+exp;
***********************************************************/
void ExpSumaResta():
{}
{
    ExpMultDiv()(
        <mas> ExpMultDiv()
        | <menos> ExpMultDiv()
    )*
}


/**********************************************************
            ExpMultDiv -> exp*exp
                        exp / exp
                        epx %% exp
***********************************************************/
void ExpMultDiv():
{}
{
    ExpPot() (
        <por> ExpPot()
        | <div> ExpPot()
        | <modular> ExpPot()
    )*
}


/**********************************************************
            ExpPot -> -exp^exp
***********************************************************/

void ExpPot():
{}
{
    ExpUnaria()(
        <pot> ExpUnaria()
    )*

}

/**********************************************************
            ExpUnaria -> -exp
                        |!exp;
***********************************************************/

void ExpUnaria():
{}
{
    <menos> ExpUnaria()
    |<not> ExpUnaria()
    | Primitivos()
}

/**********************************************************
            Primitivos -> num
                        |id;
***********************************************************/

void Primitivos():
{}
{
    <numero>
    |<decimal>
    |<STRING>
    |<identifier>
    |<apar> Exp() <cpar>

}