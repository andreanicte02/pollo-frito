options {
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */

package com.polloenpelotas.AnalizadorJCC;

import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;


public class Gramatica {
}

PARSER_END(Gramatica)


/**********************************************************
                            Lexico
***********************************************************/
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
    | <"#" (~["\n", "\r"])*>
    | <"#*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "#">
}

TOKEN : {
    <numero: (["0"-"9"])+>
    | <decimal: (["0"-"9"])+"."(["0"-"9"])+>
    | <pcoma: ";">
    | <apar: "(">
    | <cpar: ")">
    | <acor: "[">
    | <ccor: "]">
    | <alla: "{">
    | <clla: "}">
    | <mas: "+">
    | <menos: "-">
    | <por: "*">
    | <div: "/">
    | <modular: "%%">
    | <pot: "^">
    | <igual: "=">
    | <menorQue: "<">
    | <mayorQue: ">">
    | <menorIgualQue: "<=">
    | <mayorIgualQue: ">=">
    | <igualQue: "==">
    | <difQue: "!=">
    | <and: "&">
    | <or: "|">
    | <not: "!" >

    | <print: "print">
    | <identifier: (["a"-"z","A"-"Z"]|["."]["a"-"z","A"-"Z"]) ( ["a"-"z","A"-"Z", "_"] | ["0"-"9"] )* >

}

/**********************************************************
*Faltaria agregar los caracteres de escape de las cadenas *
***********************************************************/

MORE :{
     "\"" :STRING_STATE
}

<STRING_STATE> MORE:
{
    <~["\""]>
}


<STRING_STATE> TOKEN:
{
   <STRING:"\""> : DEFAULT
}

/**********************************************************
                        Fin lexico
***********************************************************/


/**********************************************************
            ProducciÃ³n inicial
            Analizar -> (Instruccion)+ EOF
**********************************************************/

 List<AstNode> Analizar() :
{ List<AstNode> l = new ArrayList<AstNode>(); AstNode e; }
{
  (e = Instruccion() { l.add(e); } ) + <EOF>
  { return l; }
}


/**********************************************************
            Instruccion -> Asignacion
                        |Imprimir;
***********************************************************/

AstNode Instruccion() :
{AstNode e;}
{
      e = Imprimir()     { return e; }
}
/**********************************************************
           Asignacion = EXP = EXP
           Imprimir = print (Exp)
***********************************************************/


AstNode Imprimir():
{AstNode e;}
{
    <print> <apar> e=ExpSumaResta() <cpar> (<pcoma>)?    { return new PrintAstNode(new FileLocation(token.beginColumn, token.beginLine),e); }
}




/**********************************************************
            ExpSumaResta -> exp-exp
                        |exp+exp;
***********************************************************/
AstNode ExpSumaResta():
{AstNode a,b;}
{
    a=ExpUnaria()(
          <mas> b = ExpSumaResta()      { return new AddAstNode(new FileLocation(token.beginColumn, token.beginLine),a,b);  }

    )* { return a; }


}



/**********************************************************
            ExpUnaria -> -exp
                        |!exp;
***********************************************************/

AstNode ExpUnaria():
{AstNode e; }
{
    <menos> e=ExpUnaria() { return new UnaryMinusNode(new FileLocation(token.beginColumn, token.beginLine), e);  }
    | e = Primitivos()    { return e; }
}


/**********************************************************
            Primitivos -> num
                        |id;
***********************************************************/

AstNode Primitivos():
{AstNode e; Token t;}
{
    <numero>        { return new CreateZIntegerNode(new FileLocation(token.beginColumn, token.beginLine),Integer.parseInt( token.image )); }


}