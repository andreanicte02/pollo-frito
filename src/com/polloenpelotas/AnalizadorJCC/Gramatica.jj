options {
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(Gramatica)
/** Analizador de expresiones aritmeticas sencillas. */

package com.polloenpelotas.AnalizadorJCC;

import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.*;


public class Gramatica {
}

PARSER_END(Gramatica)


/**********************************************************
                            Lexico
***********************************************************/

/** Lexico */
SKIP : {
      " "
    | "\t"
    | "\r"
    | "\n"
}

TOKEN : {
      <NUMERO: (["0"-"9"])+>
    | <DECIMAL: (["0"-"9"])+"."(["0"-"9"])+>
    | <PRINT: "print">
    | <PCOMA: ";">
    | <PARENI: "(">
    | <PAREND: ")">
    | <CORI: "[">
    | <CORD: "]">
    | <MAS: "+">
    | <MENOS: "-">
    | <POR: "*">
    | <DIV: "/">
    | <POT: "^">
}
/** Fin Lexico */

/** ProducciÃ³n inicial
    Analizar -> (Instruccion)+ EOF
*/
List<AstNode>  Analizar() :
{AstNode e; List<AstNode> l = new ArrayList<AstNode>(); }
{
  (e=Instruccion() {l.add(e);})+ <EOF> {return l;}
}


AstNode Instruccion() :
{AstNode e;}
{
  <PRINT> <PARENI> e=Expresion() <PAREND> (<PCOMA>)?  { return new PrintAstNode(new FileLocation(token.beginColumn, token.beginLine),e); }
}


AstNode Expresion() :
{AstNode e, e1;}
{
    e=ExpresionMultiplicativa()
    (
        <MAS> e1=ExpresionMultiplicativa() { e = new AddAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1); }

    )*
    {return e;}
}


AstNode ExpresionMultiplicativa() :
{AstNode e, e1;}
{
    e=ExpPotencia()
    (
        <POR> e1=ExpPotencia() { e = new MultAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1); }


    )*
    {return e;}
}

AstNode ExpPotencia():
{AstNode e, e1;}{

    e=ExpresionUnaria()
    (
        <POT> e1= ExpresionUnaria() { e = new PotAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1); }
    )*

    {return e;}
}

AstNode ExpresionUnaria() :
{AstNode e;}
{
    <MENOS> e=ExpresionUnaria() { return new UnaryMinusNode(new FileLocation(token.beginColumn, token.beginLine), e); }
    |
    e=Primitivo() {return e;}
}


AstNode Primitivo() :
{AstNode e;}
{
    <NUMERO> { return new CreateZIntegerNode(new FileLocation(token.beginColumn, token.beginLine),Integer.parseInt( token.image )); }
    |<PARENI> e = Expresion() <PAREND>   { return e; }

}