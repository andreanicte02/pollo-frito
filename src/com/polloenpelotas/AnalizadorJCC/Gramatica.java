/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */

package com.polloenpelotas.AnalizadorJCC;

import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.*;
import com.polloenpelotas.language.nodes.CreateZTypes.*;
import com.polloenpelotas.language.nodes.Instructions.TransferInstructions.*;


public class Gramatica implements GramaticaConstants {

/** ProducciÃ³n inicial
    Analizar -> (Instruccion)+ EOF
*/
  final public List<AstNode> analizar() throws ParseException {
 AstNode e; List<AstNode> l = new ArrayList<AstNode>();
    label_1:
    while (true) {
      e = instruccion();
                    l.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case IF:
      case BREAK:
      case SWITCH:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
                                        {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode instruccion() throws ParseException {
 AstNode e, e1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PCOMA:
        jj_consume_token(PCOMA);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
                                                  {if (true) return new BreakAstNode( new FileLocation(token.beginColumn, token.beginLine));}
      break;
    case IF:
      e = sentIf();
                                                  {if (true) return e;}
      break;
    case SWITCH:
      e = sentSwitch();
                                                 {if (true) return e;}
      break;
    case RETURN:
      e = sentReturn();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PCOMA:
        jj_consume_token(PCOMA);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                                                  {if (true) return e;}
      break;
    default:
      jj_la1[5] = jj_gen;
      if (jj_2_1(2)) {
        e = invokeFunction();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PCOMA:
          jj_consume_token(PCOMA);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
                                                  {if (true) return e;}
      } else if (jj_2_2(3)) {
        e = funcionNormal();
                                                  {if (true) return e;}
      } else if (jj_2_3(6)) {
        e = funcionFlecha();
                                                  {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          e = ExpsLeft();
          jj_consume_token(IGUAL);
          e1 = Expresion();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PCOMA:
            jj_consume_token(PCOMA);
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
                                                              {if (true) return new AssignAstNode(new FileLocation(token.beginColumn, token.beginLine),e, e1);}
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public List<AstNode> listaInstruccion() throws ParseException {
  AstNode e; List<AstNode> l = new ArrayList<AstNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RETURN:
    case IF:
    case BREAK:
    case SWITCH:
    case IDENTIFIER:
      label_2:
      while (true) {
        e = instruccion();
                     l.add(e);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURN:
        case IF:
        case BREAK:
        case SWITCH:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
      }
                                      {if (true) return l;}
      break;
    default:
      jj_la1[8] = jj_gen;
                                      {if (true) return l;}
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode funcionNormal() throws ParseException {
 Token t; List<AstNode> lPar = new ArrayList<AstNode>(); List<AstNode> lSent = new ArrayList<AstNode>();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(IGUAL);
    jj_consume_token(FUNCTION);
    jj_consume_token(APAR);
    lPar = parametros();
    jj_consume_token(CPAR);
    jj_consume_token(ALLA);
    lSent = listaInstruccion();
    jj_consume_token(CLLA);
        AstNode aux1= new FindIDLeftAstNode(new FileLocation(t.beginColumn, t.beginLine), t.image );
        AstNode aux2= new DeclararFuncionAstNode(new FileLocation(token.beginColumn, token.beginLine), lPar, lSent);


        {if (true) return new AssignFunctionAstNode(new FileLocation(token.beginColumn, token.beginLine), aux1, aux2);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode funcionFlecha() throws ParseException {
 Token t; List<AstNode> lPar = new ArrayList<AstNode>(); List<AstNode> lSent = new ArrayList<AstNode>();
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(IGUAL);
    jj_consume_token(APAR);
    lPar = parametros();
    jj_consume_token(CPAR);
    jj_consume_token(ARROW);
    jj_consume_token(ALLA);
    lSent = listaInstruccion();
    jj_consume_token(CLLA);
        AstNode aux1= new FindIDLeftAstNode(new FileLocation(t.beginColumn, t.beginLine), t.image );
        AstNode aux2= new DeclararFuncionAstNode(new FileLocation(token.beginColumn, token.beginLine), lPar, lSent);


        {if (true) return new AssignFunctionAstNode(new FileLocation(token.beginColumn, token.beginLine), aux1, aux2);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode sentReturn() throws ParseException {
 AstNode e;
    if (jj_2_4(2)) {
      jj_consume_token(RETURN);
      e = Expresion();
                                        {if (true) return new ReturnAstNode(new FileLocation(token.beginColumn, token.beginLine),e);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
        jj_consume_token(RETURN);
                          {if (true) return new ReturnAstNode(new FileLocation(token.beginColumn, token.beginLine));}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode sentIf() throws ParseException {
 AstNode e; List<AstNode> l, l2;
    jj_consume_token(IF);
    jj_consume_token(APAR);
    e = Expresion();
    jj_consume_token(CPAR);
    jj_consume_token(ALLA);
    l = listaInstruccion();
    jj_consume_token(CLLA);
    l2 = sentIf2();
        {if (true) return new IfAstNode(new FileLocation(token.beginColumn, token.beginLine), e,l,l2);}
    throw new Error("Missing return statement in function");
  }

  final public List<AstNode> sentIf2() throws ParseException {
 AstNode e; List<AstNode> l;
    if (jj_2_5(2)) {
      jj_consume_token(ELSE);
      jj_consume_token(ALLA);
      l = listaInstruccion();
      jj_consume_token(CLLA);
                                                            {if (true) return l;}
    } else if (jj_2_6(2)) {
      jj_consume_token(ELSE);
      e = sentIf();
                                                                List<AstNode> list = new ArrayList<AstNode>();
                                                                list.add(e);
                                                                {if (true) return list;}
    } else {
     {if (true) return new ArrayList<AstNode>();}
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode sentSwitch() throws ParseException {
 AstNode e, e1;
    jj_consume_token(SWITCH);
    jj_consume_token(APAR);
    e = Expresion();
    jj_consume_token(CPAR);
    jj_consume_token(ALLA);
    e1 = sentSwitch2(e);
    jj_consume_token(CLLA);
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode sentSwitch2(AstNode e) throws ParseException {
 AstNode e1; List<CaseSwitchAstNode> l = new ArrayList<CaseSwitchAstNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULTT:
      e1 = sentDefault();
     {if (true) return new SwitchAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);}
      break;
    case CASE:
      l = listCases();
      e1 = sentSwitch3();
     {if (true) return new SwitchAstNode(new FileLocation(token.beginColumn, token.beginLine),e, l, e1);}
      break;
    default:
      jj_la1[10] = jj_gen;
     {if (true) return new SwitchAstNode(new FileLocation(token.beginColumn, token.beginLine),e);}
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode sentSwitch3() throws ParseException {
 AstNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULTT:
      e = sentDefault();
     {if (true) return e;}
      break;
    default:
      jj_la1[11] = jj_gen;
     {if (true) return new DefaultSwitchAstNode(new FileLocation(token.beginColumn, token.beginLine));}
    }
    throw new Error("Missing return statement in function");
  }

  final public List<CaseSwitchAstNode> listCases() throws ParseException {
 List<CaseSwitchAstNode> list = new ArrayList<CaseSwitchAstNode>(); CaseSwitchAstNode e, e1;
    e = sentCase();
                  list.add(e);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      e1 = sentCase();
                                                 list.add(e1);
    }
     {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CaseSwitchAstNode sentCase() throws ParseException {
 AstNode e; List<AstNode> l = new ArrayList<AstNode>();
    jj_consume_token(CASE);
    e = Expresion();
    jj_consume_token(DOSP);
    l = listaInstruccion();
                                                       {if (true) return new CaseSwitchAstNode(new FileLocation(token.beginColumn, token.beginLine),e,l);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode sentDefault() throws ParseException {
 List<AstNode> l = new ArrayList<AstNode>();
    jj_consume_token(DEFAULTT);
    jj_consume_token(DOSP);
    l = listaInstruccion();
                                              {if (true) return new DefaultSwitchAstNode(new FileLocation(token.beginColumn, token.beginLine),l);}
    throw new Error("Missing return statement in function");
  }

  final public AstNode Expresion() throws ParseException {
 AstNode e, e1, e2;
    e = ExpresionOr();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TERN:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      jj_consume_token(TERN);
      e1 = ExpresionOr();
      jj_consume_token(DOSP);
      e2 = ExpresionOr();
                e= new TernarioAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1,e2);
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionOr() throws ParseException {
 AstNode e, e1;
    e = ExpresionAnd();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(OR);
      e1 = ExpresionAnd();
                                 e = new OrAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionAnd() throws ParseException {
 AstNode e, e1;
    e = ExpresionIgualdad();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(AND);
      e1 = ExpresionIgualdad();
                                       e = new AndAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionIgualdad() throws ParseException {
 AstNode e, e1;
    e = ExpresionRelacional();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALACION:
      case DIFERENCIACION:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUALACION:
        jj_consume_token(IGUALACION);
        e1 = ExpresionRelacional();
                                                e = new EqualToAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case DIFERENCIACION:
        jj_consume_token(DIFERENCIACION);
        e1 = ExpresionRelacional();
                                                    e = new NotEqualToAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionRelacional() throws ParseException {
 AstNode e, e1;
    e = ExpresionSuma();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENORQUE:
      case MAYORQUE:
      case MENORIGUAL:
      case MAYORIGUAL:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYORQUE:
        jj_consume_token(MAYORQUE);
        e1 = ExpresionSuma();
                                        e = new MayorAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case MENORQUE:
        jj_consume_token(MENORQUE);
        e1 = ExpresionSuma();
                                        e = new MenorAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case MAYORIGUAL:
        jj_consume_token(MAYORIGUAL);
        e1 = ExpresionSuma();
                                          e = new MayorIgualAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        e1 = ExpresionSuma();
                                          e = new MenorIgualAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionSuma() throws ParseException {
 AstNode e, e1;
    e = ExpresionMultiplicativa();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        e1 = ExpresionMultiplicativa();
                                             e = new AddAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        e1 = ExpresionMultiplicativa();
                                               e = new RestAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionMultiplicativa() throws ParseException {
 AstNode e, e1;
    e = ExpPotencia();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
      case MODULAR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        e1 = ExpPotencia();
                                 e = new MultAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case DIV:
        jj_consume_token(DIV);
        e1 = ExpPotencia();
                                 e = new DivAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      case MODULAR:
        jj_consume_token(MODULAR);
        e1 = ExpPotencia();
                                     e = new ModAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpPotencia() throws ParseException {
 AstNode e, e1;
    e = ExpresionUnaria();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POT:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_11;
      }
      jj_consume_token(POT);
      e1 = ExpresionUnaria();
                                      e = new PotAstNode(new FileLocation(token.beginColumn, token.beginLine),e,e1);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpresionUnaria() throws ParseException {
 AstNode e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      jj_consume_token(MENOS);
      e = ExpresionUnaria();
                                  {if (true) return new UnaryMinusNode(new FileLocation(token.beginColumn, token.beginLine), e);}
      break;
    case NOT:
      jj_consume_token(NOT);
      e = ExpresionUnaria();
                                  {if (true) return new NotAstNode(new FileLocation(token.beginColumn, token.beginLine), e);}
      break;
    case NUMERO:
    case DECIMAL:
    case APAR:
    case TRUE:
    case FALSE:
    case NOTHING:
    case DEFAULTT:
    case IDENTIFIER:
    case STRING:
      e = ExpAccess();
                   {if (true) return e;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpAccess() throws ParseException {
 AstNode e, e1;
    e = Primitives();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      if (jj_2_7(2)) {
        jj_consume_token(ABRA);
        e1 = Expresion();
        jj_consume_token(CBRA);
         e = new AccessStructAstNode (new FileLocation(token.beginColumn, token.beginLine),e,e1);
      } else if (jj_2_8(2)) {
        jj_consume_token(ABRA);
        jj_consume_token(ABRA);
        e1 = Expresion();
        jj_consume_token(CBRA);
        jj_consume_token(CBRA);
         e = new Access2ListAstNode (new FileLocation(token.beginColumn, token.beginLine),e,e1);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode Primitives() throws ParseException {
 AstNode e; Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case APAR:
      jj_consume_token(APAR);
      e = Expresion();
      jj_consume_token(CPAR);
                                      {if (true) return e;}
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
                {if (true) return new CreateZIntegerNode(new FileLocation(token.beginColumn, token.beginLine),Integer.parseInt( token.image ));}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
                {if (true) return new CreateZNumericNode (new FileLocation(token.beginColumn, token.beginLine), Double.parseDouble(token.image ));}
      break;
    case TRUE:
      jj_consume_token(TRUE);
              {if (true) return new CreateZBooleanNode(new FileLocation(token.beginColumn, token.beginLine),true);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
              {if (true) return new CreateZBooleanNode(new FileLocation(token.beginColumn, token.beginLine),false);}
      break;
    case STRING:
      t = jj_consume_token(STRING);
                 {if (true) return new CreateZStringNode(new FileLocation(token.beginColumn, token.beginLine), t.image.substring(1,t.image.length()-1) );}
      break;
    case NOTHING:
      jj_consume_token(NOTHING);
                {if (true) return new CreateZNothingNode(new FileLocation(token.beginColumn, token.beginLine));}
      break;
    case DEFAULTT:
      jj_consume_token(DEFAULTT);
                 {if (true) return new CreateZDefaultNode(new FileLocation(token.beginColumn, token.beginLine));}
      break;
    default:
      jj_la1[27] = jj_gen;
      if (jj_2_9(2)) {
        e = invokeFunction();
                                     {if (true) return e;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          t = jj_consume_token(IDENTIFIER);
                    {if (true) return new FindIDAstNode(new FileLocation(t.beginColumn, t.beginLine), t.image );}
          break;
        default:
          jj_la1[28] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode invokeFunction() throws ParseException {
 List<AstNode> l = new ArrayList<AstNode>(); Token t;
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(APAR);
    l = exps();
    jj_consume_token(CPAR);
                                            {if (true) return new InvocarFuncionAstNode(new FileLocation(t.beginColumn, t.beginLine),t.image, l);}
    throw new Error("Missing return statement in function");
  }

  final public List<AstNode> exps() throws ParseException {
  AstNode e,e1;  List<AstNode> l = new ArrayList<AstNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
    case DECIMAL:
    case APAR:
    case MENOS:
    case NOT:
    case TRUE:
    case FALSE:
    case NOTHING:
    case DEFAULTT:
    case IDENTIFIER:
    case STRING:
      e = Expresion();
                    l.add(e);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMA);
        e1 = Expresion();
                                l.add(e1);
      }
        {if (true) return l;}
      break;
    default:
      jj_la1[30] = jj_gen;
     {if (true) return l;}
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode ExpsLeft() throws ParseException {
 AstNode e, e1;
    e = PrimitivesLeft();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_14;
      }
      if (jj_2_10(2)) {
        jj_consume_token(ABRA);
        e1 = Expresion();
        jj_consume_token(CBRA);
         e = new LeftAccess1AstNode (new FileLocation(token.beginColumn, token.beginLine),e,e1);
      } else if (jj_2_11(2)) {
        jj_consume_token(ABRA);
        jj_consume_token(ABRA);
        e1 = Expresion();
        jj_consume_token(CBRA);
        jj_consume_token(CBRA);
         e = new LeftAccess2AstNode (new FileLocation(token.beginColumn, token.beginLine),e,e1);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public AstNode PrimitivesLeft() throws ParseException {
 Token t;
    t = jj_consume_token(IDENTIFIER);
                    {if (true) return new FindIDLeftAstNode(new FileLocation(t.beginColumn, t.beginLine), t.image );}
    throw new Error("Missing return statement in function");
  }

  final public List<AstNode> parametros() throws ParseException {
 AstNode e, e1; List<AstNode> l = new ArrayList<AstNode>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      e = parametro();
                   l.add(e);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMA);
        e1 = parametro();
                               l.add(e1);
      }
        {if (true) return l;}
      break;
    default:
      jj_la1[33] = jj_gen;
     {if (true) return l;}
    }
    throw new Error("Missing return statement in function");
  }

  final public AstNode parametro() throws ParseException {
 AstNode e; Token t;
    if (jj_2_12(3)) {
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(IGUAL);
      e = Expresion();
        {if (true) return new DeclararParametroAstNode(new FileLocation(token.beginColumn, token.beginLine), t.image, e);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        {if (true) return new DeclararParametroAstNode(new FileLocation(token.beginColumn, token.beginLine), t.image,
            new CreateZNothingNode(new FileLocation(token.beginColumn, token.beginLine)));}
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ABRA)) return true;
    if (jj_scan_token(ABRA)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(ABRA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(APAR)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(CPAR)) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(APAR)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(DEFAULTT)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(NOTHING)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(NUMERO)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(APAR)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ABRA)) return true;
    if (jj_scan_token(ABRA)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(ABRA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(ALLA)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(MENOS)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    }
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[35];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x80,0x80,0x80,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x800000,0x600000,0x600000,0x78000,0x78000,0xc00,0xc00,0x4003000,0x4003000,0x4000,0x62000960,0x8000000,0x60000160,0x0,0x80000000,0x62000960,0x8000000,0x80000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2d20,0x0,0x0,0x0,0x0,0xd20,0x2000,0x2d20,0x2d20,0x20,0x1080,0x80,0x1000,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12090,0x0,0x10090,0x2000,0x0,0x12090,0x0,0x0,0x2000,0x2000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[12];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 35; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 35; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 12; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
