/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
/** Analizador de expresiones aritmeticas sencillas. */

package com.polloenpelotas.AnalizadorJCC;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMERO = 6;
  /** RegularExpression Id. */
  int DECIMAL = 7;
  /** RegularExpression Id. */
  int PCOMA = 8;
  /** RegularExpression Id. */
  int APAR = 9;
  /** RegularExpression Id. */
  int CPAR = 10;
  /** RegularExpression Id. */
  int MAS = 11;
  /** RegularExpression Id. */
  int MENOS = 12;
  /** RegularExpression Id. */
  int POR = 13;
  /** RegularExpression Id. */
  int DIV = 14;
  /** RegularExpression Id. */
  int POT = 15;
  /** RegularExpression Id. */
  int MENORQUE = 16;
  /** RegularExpression Id. */
  int MAYORQUE = 17;
  /** RegularExpression Id. */
  int MENORIGUAL = 18;
  /** RegularExpression Id. */
  int MAYORIGUAL = 19;
  /** RegularExpression Id. */
  int IGUAL = 20;
  /** RegularExpression Id. */
  int ARROW = 21;
  /** RegularExpression Id. */
  int IGUALACION = 22;
  /** RegularExpression Id. */
  int DIFERENCIACION = 23;
  /** RegularExpression Id. */
  int AND = 24;
  /** RegularExpression Id. */
  int OR = 25;
  /** RegularExpression Id. */
  int NOT = 26;
  /** RegularExpression Id. */
  int MODULAR = 27;
  /** RegularExpression Id. */
  int ABRA = 28;
  /** RegularExpression Id. */
  int CBRA = 29;
  /** RegularExpression Id. */
  int TRUE = 30;
  /** RegularExpression Id. */
  int FALSE = 31;
  /** RegularExpression Id. */
  int COMA = 32;
  /** RegularExpression Id. */
  int ALLA = 33;
  /** RegularExpression Id. */
  int CLLA = 34;
  /** RegularExpression Id. */
  int TERN = 35;
  /** RegularExpression Id. */
  int DOSP = 36;
  /** RegularExpression Id. */
  int NOTHING = 37;
  /** RegularExpression Id. */
  int RETURN = 38;
  /** RegularExpression Id. */
  int FUNCTION = 39;
  /** RegularExpression Id. */
  int DEFAULTT = 40;
  /** RegularExpression Id. */
  int IF = 41;
  /** RegularExpression Id. */
  int ELSE = 42;
  /** RegularExpression Id. */
  int BREAK = 43;
  /** RegularExpression Id. */
  int SWITCH = 44;
  /** RegularExpression Id. */
  int CASE = 45;
  /** RegularExpression Id. */
  int WHILE = 46;
  /** RegularExpression Id. */
  int CONTINUE = 47;
  /** RegularExpression Id. */
  int DO = 48;
  /** RegularExpression Id. */
  int FOR = 49;
  /** RegularExpression Id. */
  int IN = 50;
  /** RegularExpression Id. */
  int IDENTIFIER = 51;
  /** RegularExpression Id. */
  int STRING = 54;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<NUMERO>",
    "<DECIMAL>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"=\"",
    "\"=>\"",
    "\"==\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"%%\"",
    "\"[\"",
    "\"]\"",
    "\"true\"",
    "\"false\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"?\"",
    "\":\"",
    "\"null\"",
    "\"return\"",
    "\"function\"",
    "\"default\"",
    "\"if\"",
    "\"else\"",
    "\"break\"",
    "\"switch\"",
    "\"case\"",
    "\"while\"",
    "\"continue\"",
    "\"do\"",
    "\"for\"",
    "\"in\"",
    "<IDENTIFIER>",
    "\"\\\"\"",
    "<token of kind 53>",
    "\"\\\"\"",
  };

}
