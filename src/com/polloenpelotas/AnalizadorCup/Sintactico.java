
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 23 19:05:35 CST 2020
//----------------------------------------------------

package com.polloenpelotas.AnalizadorCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.*;
import com.polloenpelotas.language.nodes.CreateZTypes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 23 19:05:35 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\005\006\000\002\007\007\000\002\010\003\000" +
    "\002\010\002\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\006\000\002\004\010\000\002\014\006\000\002" +
    "\015\006\000\002\011\005\000\002\012\003\000\002\012" +
    "\002\000\002\013\005\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\032\005\020\022\011\025\027\034\013\035" +
    "\006\036\005\037\022\040\015\041\004\044\026\045\025" +
    "\046\007\001\002\000\102\002\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\001\002\000\102\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032" +
    "\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\044\uffe1\045\uffe1\046\uffe1\001\002\000\102\002" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\044\uffe5\045\uffe5\046\uffe5\001\002" +
    "\000\004\025\117\001\002\000\034\002\ufffe\005\ufffe\022" +
    "\ufffe\025\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\041\ufffe\044\ufffe\045\ufffe\046\ufffe\001\002\000\030\005" +
    "\020\022\011\025\027\034\013\035\006\036\005\037\022" +
    "\040\015\041\004\044\026\045\025\001\002\000\102\002" +
    "\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\044\uffdf\045\uffdf\046\uffdf\001\002" +
    "\000\102\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\044\uffe4\045\uffe4\046" +
    "\uffe4\001\002\000\034\002\ufffc\005\ufffc\022\ufffc\025\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\001\002\000\102\002\uffe2\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\044\uffe2\045\uffe2\046\uffe2\001\002\000\042\004" +
    "\047\005\037\006\043\007\050\010\033\011\042\012\046" +
    "\013\041\014\034\015\045\016\031\017\035\020\040\021" +
    "\036\030\112\031\032\001\002\000\034\002\ufffd\005\ufffd" +
    "\022\ufffd\025\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\044\ufffd\045\ufffd\046\ufffd\001\002\000\030" +
    "\005\020\022\011\025\027\034\013\035\006\036\005\037" +
    "\022\040\015\041\004\044\026\045\025\001\002\000\004" +
    "\002\110\001\002\000\102\002\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044" +
    "\uffe3\045\uffe3\046\uffe3\001\002\000\034\002\000\005\020" +
    "\022\011\025\027\034\013\035\006\036\005\037\022\040" +
    "\015\041\004\044\026\045\025\046\007\001\002\000\102" +
    "\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011" +
    "\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\044\uffe0\045\uffe0\046\uffe0\001" +
    "\002\000\004\025\104\001\002\000\004\025\075\001\002" +
    "\000\030\005\020\022\011\025\027\034\013\035\006\036" +
    "\005\037\022\040\015\041\004\044\026\045\025\001\002" +
    "\000\042\004\047\005\037\006\043\007\050\010\033\011" +
    "\042\012\046\013\041\014\034\015\045\016\031\017\035" +
    "\020\040\021\036\026\044\031\032\001\002\000\030\005" +
    "\020\022\011\025\027\034\013\035\006\036\005\037\022" +
    "\040\015\041\004\044\026\045\025\001\002\000\032\005" +
    "\020\022\011\025\027\031\066\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\030\005\020\022\011\025\027\034\013\035\006\036\005" +
    "\037\022\040\015\041\004\044\026\045\025\001\002\000" +
    "\102\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\044\uffe9\045\uffe9\046\uffe9" +
    "\001\002\000\030\005\020\022\011\025\027\034\013\035" +
    "\006\036\005\037\022\040\015\041\004\044\026\045\025" +
    "\001\002\000\030\005\020\022\011\025\027\034\013\035" +
    "\006\036\005\037\022\040\015\041\004\044\026\045\025" +
    "\001\002\000\030\005\020\022\011\025\027\034\013\035" +
    "\006\036\005\037\022\040\015\041\004\044\026\045\025" +
    "\001\002\000\030\005\020\022\011\025\027\034\013\035" +
    "\006\036\005\037\022\040\015\041\004\044\026\045\025" +
    "\001\002\000\102\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007" +
    "\ufff3\010\033\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\031\032\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\044\ufff3\045" +
    "\ufff3\046\ufff3\001\002\000\102\002\ufff7\004\ufff7\005\ufff7" +
    "\006\043\007\050\010\033\011\042\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\032\032\ufff7\033" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\001\002\000\102\002\ufff1\004" +
    "\047\005\037\006\043\007\050\010\033\011\042\012\ufff1" +
    "\013\ufff1\014\034\015\045\016\031\017\035\020\ufff1\021" +
    "\ufff1\022\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\032" +
    "\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040" +
    "\ufff1\041\ufff1\044\ufff1\045\ufff1\046\ufff1\001\002\000\102" +
    "\002\uffee\004\047\005\037\006\043\007\050\010\033\011" +
    "\042\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\032\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\044\uffee\045\uffee\046\uffee\001" +
    "\002\000\102\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\033\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\032\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\044\ufff4\045\ufff4" +
    "\046\ufff4\001\002\000\102\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\033\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\032\032\ufff5\033\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\001\002\000\102\002\ufff0\004\047" +
    "\005\037\006\043\007\050\010\033\011\042\012\ufff0\013" +
    "\ufff0\014\034\015\045\016\031\017\035\020\ufff0\021\ufff0" +
    "\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\032\032" +
    "\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0" +
    "\041\ufff0\044\ufff0\045\ufff0\046\ufff0\001\002\000\102\002" +
    "\uffeb\004\047\005\037\006\043\007\050\010\033\011\042" +
    "\012\046\013\041\014\034\015\045\016\031\017\035\020" +
    "\uffeb\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\032\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\044\uffeb\045\uffeb\046\uffeb\001\002" +
    "\000\102\002\ufff6\004\ufff6\005\ufff6\006\043\007\050\010" +
    "\033\011\042\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\025\ufff6\026\ufff6\027" +
    "\ufff6\030\ufff6\031\032\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\036\ufff6\037\ufff6\040\ufff6\041\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\001\002\000\102\002\uffea\004\047\005\037\006\043" +
    "\007\050\010\033\011\042\012\046\013\041\014\034\015" +
    "\045\016\031\017\035\020\040\021\uffea\022\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\032\032\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\044\uffea" +
    "\045\uffea\046\uffea\001\002\000\102\002\uffef\004\047\005" +
    "\037\006\043\007\050\010\033\011\042\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031\032\032\uffef" +
    "\033\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\041" +
    "\uffef\044\uffef\045\uffef\046\uffef\001\002\000\102\002\uffed" +
    "\004\047\005\037\006\043\007\050\010\033\011\042\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\032\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\044\uffed\045\uffed\046\uffed\001\002\000" +
    "\102\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2" +
    "\030\ufff2\031\032\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036" +
    "\ufff2\037\ufff2\040\ufff2\041\ufff2\044\ufff2\045\ufff2\046\ufff2" +
    "\001\002\000\030\005\020\022\011\025\027\034\013\035" +
    "\006\036\005\037\022\040\015\041\004\044\026\045\025" +
    "\001\002\000\042\004\047\005\037\006\043\007\050\010" +
    "\033\011\042\012\046\013\041\014\034\015\045\016\031" +
    "\017\035\020\040\021\036\031\032\032\070\001\002\000" +
    "\102\002\uffde\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\041\uffde\044\uffde\045\uffde\046\uffde" +
    "\001\002\000\042\004\047\005\037\006\043\007\050\010" +
    "\033\011\042\012\046\013\041\014\034\015\045\016\031" +
    "\017\035\020\040\021\036\031\032\032\072\001\002\000" +
    "\004\032\073\001\002\000\102\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\001\002\000\102\002\uffec\004" +
    "\047\005\037\006\043\007\050\010\033\011\042\012\uffec" +
    "\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021" +
    "\uffec\022\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\032" +
    "\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\041\uffec\044\uffec\045\uffec\046\uffec\001\002\000\032" +
    "\005\020\022\011\025\027\026\uffd8\034\013\035\006\036" +
    "\005\037\022\040\015\041\004\044\026\045\025\001\002" +
    "\000\004\026\103\001\002\000\044\004\047\005\037\006" +
    "\043\007\050\010\033\011\042\012\046\013\041\014\034" +
    "\015\045\016\031\017\035\020\040\021\036\026\uffd6\031" +
    "\032\033\uffd6\001\002\000\006\026\uffd9\033\101\001\002" +
    "\000\030\005\020\022\011\025\027\034\013\035\006\036" +
    "\005\037\022\040\015\041\004\044\026\045\025\001\002" +
    "\000\044\004\047\005\037\006\043\007\050\010\033\011" +
    "\042\012\046\013\041\014\034\015\045\016\031\017\035" +
    "\020\040\021\036\026\uffd7\031\032\033\uffd7\001\002\000" +
    "\102\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\001\002\000\032\005\020\022\011\025\027\026\uffd8\034" +
    "\013\035\006\036\005\037\022\040\015\041\004\044\026" +
    "\045\025\001\002\000\004\026\106\001\002\000\102\002" +
    "\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\044\uffdb\045\uffdb\046\uffdb\001\002" +
    "\000\034\002\uffff\005\uffff\022\uffff\025\uffff\034\uffff\035" +
    "\uffff\036\uffff\037\uffff\040\uffff\041\uffff\044\uffff\045\uffff" +
    "\046\uffff\001\002\000\004\002\001\001\002\000\102\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\031\032\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\044\uffe7\045\uffe7\046\uffe7\001\002" +
    "\000\030\005\020\022\011\025\027\034\013\035\006\036" +
    "\005\037\022\040\015\041\004\044\026\045\025\001\002" +
    "\000\072\002\ufff8\004\047\005\037\006\043\007\050\010" +
    "\033\011\042\012\046\013\041\014\034\015\045\016\031" +
    "\017\035\020\040\021\036\022\ufff8\025\ufff8\027\114\031" +
    "\032\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\044\ufff8\045\ufff8\046\ufff8\001\002\000\034\002\ufff9\005" +
    "\ufff9\022\ufff9\025\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\044\ufff9\045\ufff9\046\ufff9\001\002\000" +
    "\034\002\ufffb\005\ufffb\022\ufffb\025\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\001\002\000\102\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\032\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\044\uffe8" +
    "\045\uffe8\046\uffe8\001\002\000\030\005\020\022\011\025" +
    "\027\034\013\035\006\036\005\037\022\040\015\041\004" +
    "\044\026\045\025\001\002\000\042\004\047\005\037\006" +
    "\043\007\050\010\033\011\042\012\046\013\041\014\034" +
    "\015\045\016\031\017\035\020\040\021\036\026\121\031" +
    "\032\001\002\000\036\002\ufff8\005\ufff8\022\ufff8\025\ufff8" +
    "\027\114\034\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\001\002\000\034\002\ufffa" +
    "\005\ufffa\022\ufffa\025\ufffa\034\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\044\ufffa\045\ufffa\046\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\022\002\020\003\022\004\015\005\016\006" +
    "\007\007\013\014\023\015\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\115\014\023\015\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\110\014\023\015\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\015\005\016\006\106\007\013" +
    "\014\023\015\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\027\014\023\015\011" +
    "\001\001\000\002\001\001\000\010\004\073\014\023\015" +
    "\011\001\001\000\010\004\066\014\023\015\011\001\001" +
    "\000\010\004\064\014\023\015\011\001\001\000\010\004" +
    "\063\014\023\015\011\001\001\000\010\004\062\014\023" +
    "\015\011\001\001\000\010\004\061\014\023\015\011\001" +
    "\001\000\010\004\060\014\023\015\011\001\001\000\010" +
    "\004\057\014\023\015\011\001\001\000\010\004\056\014" +
    "\023\015\011\001\001\000\010\004\055\014\023\015\011" +
    "\001\001\000\010\004\054\014\023\015\011\001\001\000" +
    "\002\001\001\000\010\004\053\014\023\015\011\001\001" +
    "\000\010\004\052\014\023\015\011\001\001\000\010\004" +
    "\051\014\023\015\011\001\001\000\010\004\050\014\023" +
    "\015\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\070\014\023\015\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\076\012\075\013\077\014\023\015\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\101\014\023\015\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\076\012\104\013\077\014" +
    "\023\015\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\112\014\023\015\011\001\001\000\004\010\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\117\014\023\015\011\001\001\000\002" +
    "\001\001\000\004\010\121\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    public void semantic(Symbol cur_token, String n)
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exps ::= exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exps ::= exps coma exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // listExp ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // listExp ::= exps 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // crearVector ::= abra listExp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new CreateZVectorNode(new FileLocation(aleft, aright), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("crearVector",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // createList ::= list apar listExp cpar 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new CreateZListNode(new FileLocation(oleft, oright),a ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("createList",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // functionC ::= c apar listExp cpar 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new FunctionCAstNode(new FileLocation(aleft, aright), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("functionC",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Access2ListAstNode(new FileLocation(aleft, aright), a ,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp abra exp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccessStructAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= createList 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= functionC 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= identifier 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDAstNode(new FileLocation(aleft, aright),a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= falsee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= truee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), true);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= numero 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZIntegerNode(new FileLocation(aleft, aright),Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= decimal 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNumericNode (new FileLocation(aleft, aright), Double.parseDouble(a )); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= cadena 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZStringNode(new FileLocation(aleft, aright),a ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new UnaryMinusNode(new FileLocation(aleft, aright), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= not exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= apar exp cpar 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT =  e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp or exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OrAstNode (new FileLocation(aleft, aright), a,b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp and exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AndAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp menorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp mayorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp mayorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp menorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp difQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotEqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp igualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new EqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp potenciar exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PotAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp dividir exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DivAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp por exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MultAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp modulo exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new RestAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp mas exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AddAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // endSent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // endSent ::= pComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // imprimir ::= print apar exp cpar endSent 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new PrintAstNode(new FileLocation(eleft, eright),e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // asignacion ::= exp igual exp endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AssignAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaPrueba ::= imprimir 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaPrueba",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaPrueba ::= asignacion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaPrueba",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentenciasPrueba ::= sentenciaPrueba 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciasPrueba",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentenciasPrueba ::= sentenciasPrueba sentenciaPrueba 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciasPrueba",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciasPrueba 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> start_val = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

