
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 16 11:12:03 CST 2020
//----------------------------------------------------

package com.polloenpelotas.AnalizadorCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 16 11:12:03 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\002\003\000\002\005" +
    "\004\000\002\005\003\000\002\006\003\000\002\006\003" +
    "\000\002\004\006\000\002\010\007\000\002\007\003\000" +
    "\002\007\002\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\004\000\002" +
    "\003\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\020\005\014\022\005\025\006\031\016\032" +
    "\012\033\017\035\004\001\002\000\004\025\067\001\002" +
    "\000\016\005\014\022\005\025\006\031\016\032\012\033" +
    "\017\001\002\000\016\005\014\022\005\025\006\031\016" +
    "\032\012\033\017\001\002\000\040\004\037\005\030\006" +
    "\034\007\040\010\024\011\033\012\036\013\032\014\025" +
    "\015\035\016\023\017\026\020\031\021\027\030\060\001" +
    "\002\000\022\002\ufffe\005\ufffe\022\ufffe\025\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\035\ufffe\001\002\000\004\002\057\001" +
    "\002\000\062\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\035\uffe7\001" +
    "\002\000\022\002\ufffc\005\ufffc\022\ufffc\025\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\035\ufffc\001\002\000\016\005\014\022" +
    "\005\025\006\031\016\032\012\033\017\001\002\000\022" +
    "\002\ufffd\005\ufffd\022\ufffd\025\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\035\ufffd\001\002\000\062\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\035\uffe6\001\002\000\062\002\uffe5\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\035\uffe5\001\002\000\022\002\000\005\014\022\005" +
    "\025\006\031\016\032\012\033\017\035\004\001\002\000" +
    "\022\002\uffff\005\uffff\022\uffff\025\uffff\031\uffff\032\uffff" +
    "\033\uffff\035\uffff\001\002\000\062\002\uffe8\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\024\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\035\uffe8\001\002\000\016\005\014\022\005\025" +
    "\006\031\016\032\012\033\017\001\002\000\016\005\014" +
    "\022\005\025\006\031\016\032\012\033\017\001\002\000" +
    "\016\005\014\022\005\025\006\031\016\032\012\033\017" +
    "\001\002\000\016\005\014\022\005\025\006\031\016\032" +
    "\012\033\017\001\002\000\016\005\014\022\005\025\006" +
    "\031\016\032\012\033\017\001\002\000\016\005\014\022" +
    "\005\025\006\031\016\032\012\033\017\001\002\000\016" +
    "\005\014\022\005\025\006\031\016\032\012\033\017\001" +
    "\002\000\016\005\014\022\005\025\006\031\016\032\012" +
    "\033\017\001\002\000\016\005\014\022\005\025\006\031" +
    "\016\032\012\033\017\001\002\000\016\005\014\022\005" +
    "\025\006\031\016\032\012\033\017\001\002\000\016\005" +
    "\014\022\005\025\006\031\016\032\012\033\017\001\002" +
    "\000\016\005\014\022\005\025\006\031\016\032\012\033" +
    "\017\001\002\000\016\005\014\022\005\025\006\031\016" +
    "\032\012\033\017\001\002\000\016\005\014\022\005\025" +
    "\006\031\016\032\012\033\017\001\002\000\062\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\024\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3" +
    "\021\ufff3\022\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\035\ufff3\001\002\000\062\002\ufff7" +
    "\004\ufff7\005\ufff7\006\034\007\040\010\024\011\033\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\021\ufff7\022\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\035\ufff7\001\002\000\062\002\ufff1" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\ufff1\013\ufff1\014\025\015\035\016\023\017\026\020\ufff1" +
    "\021\ufff1\022\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\035\ufff1\001\002\000\062\002\uffee" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\021\uffee\022\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\035\uffee\001\002\000\062\002\ufff4" +
    "\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\024\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\033\ufff4\035\ufff4\001\002\000\062\002\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\024\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5" +
    "\021\ufff5\022\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\035\ufff5\001\002\000\062\002\ufff0" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\ufff0\013\ufff0\014\025\015\035\016\023\017\026\020\ufff0" +
    "\021\ufff0\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\035\ufff0\001\002\000\062\002\uffeb" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\036\013\032\014\025\015\035\016\023\017\026\020\uffeb" +
    "\021\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\035\uffeb\001\002\000\062\002\ufff6" +
    "\004\ufff6\005\ufff6\006\034\007\040\010\024\011\033\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\035\ufff6\001\002\000\062\002\uffea" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\036\013\032\014\025\015\035\016\023\017\026\020\031" +
    "\021\uffea\022\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\035\uffea\001\002\000\062\002\uffef" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\021\uffef\022\uffef\025\uffef\026\uffef\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\035\uffef\001\002\000\062\002\uffed" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\032\uffed\033\uffed\035\uffed\001\002\000\062\002\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\035\ufff2\001\002\000\062\002\uffec" +
    "\004\037\005\030\006\034\007\040\010\024\011\033\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec" +
    "\021\uffec\022\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\035\uffec\001\002\000\004\002\001" +
    "\001\002\000\016\005\014\022\005\025\006\031\016\032" +
    "\012\033\017\001\002\000\056\002\ufff8\004\037\005\030" +
    "\006\034\007\040\010\024\011\033\012\036\013\032\014" +
    "\025\015\035\016\023\017\026\020\031\021\027\022\ufff8" +
    "\025\ufff8\027\062\031\ufff8\032\ufff8\033\ufff8\035\ufff8\001" +
    "\002\000\022\002\ufff9\005\ufff9\022\ufff9\025\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\035\ufff9\001\002\000\022\002\ufffb\005" +
    "\ufffb\022\ufffb\025\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb" +
    "\001\002\000\040\004\037\005\030\006\034\007\040\010" +
    "\024\011\033\012\036\013\032\014\025\015\035\016\023" +
    "\017\026\020\031\021\027\026\065\001\002\000\062\002" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\035\uffe4\001\002\000\062\002" +
    "\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\024\011\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\031\uffe9\032\uffe9\033\uffe9\035\uffe9\001\002\000\016\005" +
    "\014\022\005\025\006\031\016\032\012\033\017\001\002" +
    "\000\040\004\037\005\030\006\034\007\040\010\024\011" +
    "\033\012\036\013\032\014\025\015\035\016\023\017\026" +
    "\020\031\021\027\026\071\001\002\000\024\002\ufff8\005" +
    "\ufff8\022\ufff8\025\ufff8\027\062\031\ufff8\032\ufff8\033\ufff8" +
    "\035\ufff8\001\002\000\022\002\ufffa\005\ufffa\022\ufffa\025" +
    "\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\016\002\010\003\006\004\014\005\017\006" +
    "\007\010\012\001\001\000\002\001\001\000\004\003\065" +
    "\001\001\000\004\003\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\006\004\014" +
    "\006\020\010\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\055\001\001\000\004\003\054\001\001" +
    "\000\004\003\053\001\001\000\004\003\052\001\001\000" +
    "\004\003\051\001\001\000\004\003\050\001\001\000\004" +
    "\003\047\001\001\000\004\003\046\001\001\000\004\003" +
    "\045\001\001\000\004\003\044\001\001\000\004\003\043" +
    "\001\001\000\004\003\042\001\001\000\004\003\041\001" +
    "\001\000\004\003\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\060\001\001\000\004\007\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\067\001" +
    "\001\000\002\001\001\000\004\007\071\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    public void semantic(Symbol cur_token, String n)
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= apar exp cpar 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= identifier 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= numero 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= decimal 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= menos exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= not exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp or exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp and exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp menorQue exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp mayorQue exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp ::= exp mayorIgualQue exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp ::= exp menorIgualQue exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= exp difQue exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp igualQue exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp potenciar exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp ::= exp dividir exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp ::= exp por exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp ::= exp modulo exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp menos exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= exp mas exp 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // endSent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // endSent ::= pComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // imprimir ::= print apar exp cpar endSent 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // asignacion ::= exp igual exp endSent 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentenciaPrueba ::= imprimir 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaPrueba",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentenciaPrueba ::= asignacion 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciaPrueba",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentenciasPrueba ::= sentenciaPrueba 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciasPrueba",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentenciasPrueba ::= sentenciasPrueba sentenciaPrueba 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentenciasPrueba",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentenciasPrueba 
            {
              String RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

