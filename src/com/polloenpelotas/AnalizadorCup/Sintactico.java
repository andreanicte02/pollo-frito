
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 04 16:30:36 CST 2020
//----------------------------------------------------

package com.polloenpelotas.AnalizadorCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.*;
import com.polloenpelotas.language.nodes.CreateZTypes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 04 16:30:36 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\014\002\000\002\015\004\000\002\015\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\005\005\000\002\021\005\000\002\017\005\000\002\017" +
    "\004\000\002\016\011\000\002\016\011\000\002\016\013" +
    "\000\002\016\010\000\002\013\003\000\002\013\006\000" +
    "\002\013\010\000\002\010\003\000\002\010\002\000\002" +
    "\022\007\000\002\022\011\000\002\022\011\000\002\023" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\007\000\002\004\005" +
    "\000\002\004\004\000\002\004\004\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\006\000\002\004\010\000\002\004" +
    "\003\000\002\004\005\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\020\006\000\002\011\003\000" +
    "\002\011\002\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\012\040\014\053\020\054\017\056\004\001" +
    "\002\000\020\002\uffe9\027\120\035\uffe9\040\uffe9\053\uffe9" +
    "\054\uffe9\056\uffe9\001\002\000\016\002\ufff8\035\ufff8\040" +
    "\ufff8\053\ufff8\054\ufff8\056\ufff8\001\002\000\016\002\ufff7" +
    "\035\ufff7\040\ufff7\053\ufff7\054\ufff7\056\ufff7\001\002\000" +
    "\016\002\ufffc\035\ufffc\040\ufffc\053\ufffc\054\ufffc\056\ufffc" +
    "\001\002\000\016\002\ufff9\035\ufff9\040\ufff9\053\ufff9\054" +
    "\ufff9\056\ufff9\001\002\000\004\002\207\001\002\000\020" +
    "\002\uffe9\027\120\035\uffe9\040\uffe9\053\uffe9\054\uffe9\056" +
    "\uffe9\001\002\000\006\030\142\031\143\001\002\000\010" +
    "\025\037\030\uffed\031\uffed\001\002\000\020\002\uffe9\027" +
    "\120\035\uffe9\040\uffe9\053\uffe9\054\uffe9\056\uffe9\001\002" +
    "\000\014\002\000\040\014\053\020\054\017\056\004\001" +
    "\002\000\004\025\125\001\002\000\032\005\032\022\023" +
    "\025\026\027\035\036\033\037\030\040\034\041\021\042" +
    "\022\043\025\046\031\052\024\001\002\000\070\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\035\uffcf\040\uffcf\053\uffcf\054\uffcf\056\uffcf" +
    "\001\002\000\070\002\uffce\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce\026" +
    "\uffce\027\uffce\031\uffce\032\uffce\033\uffce\035\uffce\040\uffce" +
    "\053\uffce\054\uffce\056\uffce\001\002\000\030\005\032\022" +
    "\023\025\026\036\033\037\030\040\034\041\021\042\022" +
    "\043\025\046\031\052\024\001\002\000\070\002\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\035\uffc8\040\uffc8\053\uffc8\054\uffc8\056\uffc8\001" +
    "\002\000\070\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2" +
    "\027\uffd2\031\uffd2\032\uffd2\033\uffd2\035\uffd2\040\uffd2\053" +
    "\uffd2\054\uffd2\056\uffd2\001\002\000\030\005\032\022\023" +
    "\025\026\036\033\037\030\040\034\041\021\042\022\043" +
    "\025\046\031\052\024\001\002\000\060\002\uffe9\004\060" +
    "\005\053\006\055\007\061\010\044\011\054\012\057\013" +
    "\052\014\047\015\056\016\042\017\046\020\051\021\050" +
    "\023\045\027\120\031\043\035\uffe9\040\uffe9\053\uffe9\054" +
    "\uffe9\056\uffe9\001\002\000\070\002\uffd1\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1" +
    "\024\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\035" +
    "\uffd1\040\uffd1\053\uffd1\054\uffd1\056\uffd1\001\002\000\070" +
    "\002\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\035\uffcb\040\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\001\002\000\030\005\032\022\023\025\026\036" +
    "\033\037\030\040\034\041\021\042\022\043\025\046\031" +
    "\052\024\001\002\000\070\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0" +
    "\040\uffd0\053\uffd0\054\uffd0\056\uffd0\001\002\000\074\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\023\uffc7\024\uffc7\025\037\026\uffc7\027\uffc7" +
    "\030\040\031\uffc7\032\uffc7\033\uffc7\035\uffc7\040\uffc7\053" +
    "\uffc7\054\uffc7\056\uffc7\001\002\000\016\002\ufff2\035\ufff2" +
    "\040\ufff2\053\ufff2\054\ufff2\056\ufff2\001\002\000\070\002" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\035\uffc9\040\uffc9\053\uffc9\054\uffc9\056" +
    "\uffc9\001\002\000\032\005\032\022\023\025\026\026\uffc4" +
    "\036\033\037\030\040\034\041\021\042\022\043\025\046" +
    "\031\052\024\001\002\000\030\005\032\022\023\025\026" +
    "\036\033\037\030\040\034\041\021\042\022\043\025\046" +
    "\031\052\024\001\002\000\070\002\uffca\004\060\005\053" +
    "\006\055\007\061\010\044\011\054\012\057\013\052\014" +
    "\047\015\056\016\042\017\046\020\051\021\050\023\045" +
    "\024\uffca\026\uffca\027\uffca\031\043\032\uffca\033\uffca\035" +
    "\uffca\040\uffca\053\uffca\054\uffca\056\uffca\001\002\000\030" +
    "\005\032\022\023\025\026\036\033\037\030\040\034\041" +
    "\021\042\022\043\025\046\031\052\024\001\002\000\032" +
    "\005\032\022\023\025\026\031\102\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\070\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\044\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\026\uffe0\027" +
    "\uffe0\031\043\032\uffe0\033\uffe0\035\uffe0\040\uffe0\053\uffe0" +
    "\054\uffe0\056\uffe0\001\002\000\070\002\uffe4\004\uffe4\005" +
    "\uffe4\006\055\007\061\010\044\011\054\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\023" +
    "\uffe4\024\uffe4\026\uffe4\027\uffe4\031\043\032\uffe4\033\uffe4" +
    "\035\uffe4\040\uffe4\053\uffe4\054\uffe4\056\uffe4\001\002\000" +
    "\070\002\uffde\004\060\005\053\006\055\007\061\010\044" +
    "\011\054\012\uffde\013\uffde\014\047\015\056\016\042\017" +
    "\046\020\uffde\021\uffde\023\uffde\024\uffde\026\uffde\027\uffde" +
    "\031\043\032\uffde\033\uffde\035\uffde\040\uffde\053\uffde\054" +
    "\uffde\056\uffde\001\002\000\070\002\uffdb\004\060\005\053" +
    "\006\055\007\061\010\044\011\054\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\027\uffdb\031\043\032\uffdb\033\uffdb\035" +
    "\uffdb\040\uffdb\053\uffdb\054\uffdb\056\uffdb\001\002\000\070" +
    "\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\044\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\023\uffe1\024\uffe1\026\uffe1\027\uffe1\031" +
    "\043\032\uffe1\033\uffe1\035\uffe1\040\uffe1\053\uffe1\054\uffe1" +
    "\056\uffe1\001\002\000\070\002\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\044\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\026\uffe2\027\uffe2\031\043\032\uffe2\033\uffe2\035\uffe2" +
    "\040\uffe2\053\uffe2\054\uffe2\056\uffe2\001\002\000\070\002" +
    "\uffe3\004\uffe3\005\uffe3\006\055\007\061\010\044\011\054" +
    "\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\031\043" +
    "\032\uffe3\033\uffe3\035\uffe3\040\uffe3\053\uffe3\054\uffe3\056" +
    "\uffe3\001\002\000\070\002\uffdd\004\060\005\053\006\055" +
    "\007\061\010\044\011\054\012\uffdd\013\uffdd\014\047\015" +
    "\056\016\042\017\046\020\uffdd\021\uffdd\023\uffdd\024\uffdd" +
    "\026\uffdd\027\uffdd\031\043\032\uffdd\033\uffdd\035\uffdd\040" +
    "\uffdd\053\uffdd\054\uffdd\056\uffdd\001\002\000\070\002\uffd8" +
    "\004\060\005\053\006\055\007\061\010\044\011\054\012" +
    "\057\013\052\014\047\015\056\016\042\017\046\020\uffd8" +
    "\021\uffd8\023\uffd8\024\uffd8\026\uffd8\027\uffd8\031\043\032" +
    "\uffd8\033\uffd8\035\uffd8\040\uffd8\053\uffd8\054\uffd8\056\uffd8" +
    "\001\002\000\070\002\uffd7\004\060\005\053\006\055\007" +
    "\061\010\044\011\054\012\057\013\052\014\047\015\056" +
    "\016\042\017\046\020\051\021\uffd7\023\uffd7\024\uffd7\026" +
    "\uffd7\027\uffd7\031\043\032\uffd7\033\uffd7\035\uffd7\040\uffd7" +
    "\053\uffd7\054\uffd7\056\uffd7\001\002\000\070\002\uffda\004" +
    "\060\005\053\006\055\007\061\010\044\011\054\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\023\uffda\024\uffda\026\uffda\027\uffda\031\043\032\uffda" +
    "\033\uffda\035\uffda\040\uffda\053\uffda\054\uffda\056\uffda\001" +
    "\002\000\070\002\uffdc\004\060\005\053\006\055\007\061" +
    "\010\044\011\054\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\026\uffdc" +
    "\027\uffdc\031\043\032\uffdc\033\uffdc\035\uffdc\040\uffdc\053" +
    "\uffdc\054\uffdc\056\uffdc\001\002\000\044\004\060\005\053" +
    "\006\055\007\061\010\044\011\054\012\057\013\052\014" +
    "\047\015\056\016\042\017\046\020\051\021\050\023\045" +
    "\024\077\031\043\001\002\000\030\005\032\022\023\025" +
    "\026\036\033\037\030\040\034\041\021\042\022\043\025" +
    "\046\031\052\024\001\002\000\070\002\uffd6\004\060\005" +
    "\053\006\055\007\061\010\044\011\054\012\057\013\052" +
    "\014\047\015\056\016\042\017\046\020\051\021\050\023" +
    "\045\024\uffd6\026\uffd6\027\uffd6\031\043\032\uffd6\033\uffd6" +
    "\035\uffd6\040\uffd6\053\uffd6\054\uffd6\056\uffd6\001\002\000" +
    "\070\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf" +
    "\031\043\032\uffdf\033\uffdf\035\uffdf\040\uffdf\053\uffdf\054" +
    "\uffdf\056\uffdf\001\002\000\030\005\032\022\023\025\026" +
    "\036\033\037\030\040\034\041\021\042\022\043\025\046" +
    "\031\052\024\001\002\000\044\004\060\005\053\006\055" +
    "\007\061\010\044\011\054\012\057\013\052\014\047\015" +
    "\056\016\042\017\046\020\051\021\050\023\045\031\043" +
    "\032\104\001\002\000\070\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd" +
    "\040\uffcd\053\uffcd\054\uffcd\056\uffcd\001\002\000\044\004" +
    "\060\005\053\006\055\007\061\010\044\011\054\012\057" +
    "\013\052\014\047\015\056\016\042\017\046\020\051\021" +
    "\050\023\045\031\043\032\106\001\002\000\004\032\107" +
    "\001\002\000\070\002\uffcc\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\026" +
    "\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\040\uffcc" +
    "\053\uffcc\054\uffcc\056\uffcc\001\002\000\070\002\uffd9\004" +
    "\060\005\053\006\055\007\061\010\044\011\054\012\uffd9" +
    "\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\031\043\032\uffd9" +
    "\033\uffd9\035\uffd9\040\uffd9\053\uffd9\054\uffd9\056\uffd9\001" +
    "\002\000\004\026\116\001\002\000\046\004\060\005\053" +
    "\006\055\007\061\010\044\011\054\012\057\013\052\014" +
    "\047\015\056\016\042\017\046\020\051\021\050\023\045" +
    "\026\uffc2\031\043\033\uffc2\001\002\000\006\026\uffc5\033" +
    "\114\001\002\000\030\005\032\022\023\025\026\036\033" +
    "\037\030\040\034\041\021\042\022\043\025\046\031\052" +
    "\024\001\002\000\046\004\060\005\053\006\055\007\061" +
    "\010\044\011\054\012\057\013\052\014\047\015\056\016" +
    "\042\017\046\020\051\021\050\023\045\026\uffc3\031\043" +
    "\033\uffc3\001\002\000\070\002\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024" +
    "\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6" +
    "\040\uffc6\053\uffc6\054\uffc6\056\uffc6\001\002\000\070\002" +
    "\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\026\uffd3\027\uffd3\031\043" +
    "\032\uffd3\033\uffd3\035\uffd3\040\uffd3\053\uffd3\054\uffd3\056" +
    "\uffd3\001\002\000\016\002\uffea\035\uffea\040\uffea\053\uffea" +
    "\054\uffea\056\uffea\001\002\000\016\002\ufff3\035\ufff3\040" +
    "\ufff3\053\ufff3\054\ufff3\056\ufff3\001\002\000\044\004\060" +
    "\005\053\006\055\007\061\010\044\011\054\012\057\013" +
    "\052\014\047\015\056\016\042\017\046\020\051\021\050" +
    "\023\045\026\123\031\043\001\002\000\070\002\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\035\uffd5\040\uffd5\053\uffd5\054\uffd5\056\uffd5\001" +
    "\002\000\070\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\026\uffd4" +
    "\027\uffd4\031\043\032\uffd4\033\uffd4\035\uffd4\040\uffd4\053" +
    "\uffd4\054\uffd4\056\uffd4\001\002\000\030\005\032\022\023" +
    "\025\026\036\033\037\030\040\034\041\021\042\022\043" +
    "\025\046\031\052\024\001\002\000\044\004\060\005\053" +
    "\006\055\007\061\010\044\011\054\012\057\013\052\014" +
    "\047\015\056\016\042\017\046\020\051\021\050\023\045" +
    "\026\127\031\043\001\002\000\004\034\130\001\002\000" +
    "\014\035\ufffe\040\014\053\020\054\017\056\004\001\002" +
    "\000\020\002\uffe8\035\uffe8\040\uffe8\053\uffe8\054\uffe8\055" +
    "\132\056\uffe8\001\002\000\006\034\130\054\017\001\002" +
    "\000\016\002\uffe7\035\uffe7\040\uffe7\053\uffe7\054\uffe7\056" +
    "\uffe7\001\002\000\016\002\uffe6\035\uffe6\040\uffe6\053\uffe6" +
    "\054\uffe6\056\uffe6\001\002\000\004\035\140\001\002\000" +
    "\014\035\uffff\040\014\053\020\054\017\056\004\001\002" +
    "\000\016\002\ufffd\035\ufffd\040\ufffd\053\ufffd\054\ufffd\056" +
    "\ufffd\001\002\000\020\002\uffe5\035\uffe5\040\uffe5\053\uffe5" +
    "\054\uffe5\055\uffe5\056\uffe5\001\002\000\016\002\ufffa\035" +
    "\ufffa\040\ufffa\053\ufffa\054\ufffa\056\ufffa\001\002\000\032" +
    "\005\032\022\023\025\153\036\033\037\030\040\034\041" +
    "\021\042\022\043\025\046\031\047\154\052\024\001\002" +
    "\000\032\005\032\022\023\025\026\031\144\036\033\037" +
    "\030\040\034\041\021\042\022\043\025\046\031\052\024" +
    "\001\002\000\030\005\032\022\023\025\026\036\033\037" +
    "\030\040\034\041\021\042\022\043\025\046\031\052\024" +
    "\001\002\000\044\004\060\005\053\006\055\007\061\010" +
    "\044\011\054\012\057\013\052\014\047\015\056\016\042" +
    "\017\046\020\051\021\050\023\045\031\043\032\146\001" +
    "\002\000\006\030\uffec\031\uffec\001\002\000\044\004\060" +
    "\005\053\006\055\007\061\010\044\011\054\012\057\013" +
    "\052\014\047\015\056\016\042\017\046\020\051\021\050" +
    "\023\045\031\043\032\150\001\002\000\004\032\151\001" +
    "\002\000\006\030\uffeb\031\uffeb\001\002\000\060\002\ufff5" +
    "\004\060\005\053\006\055\007\061\010\044\011\054\012" +
    "\057\013\052\014\047\015\056\016\042\017\046\020\051" +
    "\021\050\023\045\027\ufff5\031\043\035\ufff5\040\ufff5\053" +
    "\ufff5\054\ufff5\056\ufff5\001\002\000\032\005\032\022\023" +
    "\025\026\026\165\036\033\037\030\040\034\041\021\042" +
    "\022\043\025\046\031\052\024\001\002\000\004\025\156" +
    "\001\002\000\016\002\ufff4\035\ufff4\040\ufff4\053\ufff4\054" +
    "\ufff4\056\ufff4\001\002\000\032\005\032\022\023\025\026" +
    "\026\uffc4\036\033\037\030\040\034\041\021\042\022\043" +
    "\025\046\031\052\024\001\002\000\004\026\160\001\002" +
    "\000\004\034\161\001\002\000\014\035\ufffe\040\014\053" +
    "\020\054\017\056\004\001\002\000\004\035\163\001\002" +
    "\000\016\002\ufff1\035\ufff1\040\ufff1\053\ufff1\054\ufff1\056" +
    "\ufff1\001\002\000\046\004\060\005\053\006\055\007\061" +
    "\010\044\011\054\012\057\013\052\014\047\015\056\016" +
    "\042\017\046\020\051\021\050\023\045\026\173\031\043" +
    "\033\172\001\002\000\004\050\166\001\002\000\004\034" +
    "\167\001\002\000\014\035\ufffe\040\014\053\020\054\017" +
    "\056\004\001\002\000\004\035\171\001\002\000\016\002" +
    "\uffee\035\uffee\040\uffee\053\uffee\054\uffee\056\uffee\001\002" +
    "\000\030\005\032\022\023\025\026\036\033\037\030\040" +
    "\034\041\021\042\022\043\025\046\031\052\024\001\002" +
    "\000\062\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\027\uffd5\031\uffd5\035" +
    "\uffd5\040\uffd5\050\174\053\uffd5\054\uffd5\056\uffd5\001\002" +
    "\000\004\034\175\001\002\000\014\035\ufffe\040\014\053" +
    "\020\054\017\056\004\001\002\000\004\035\177\001\002" +
    "\000\016\002\ufff0\035\ufff0\040\ufff0\053\ufff0\054\ufff0\056" +
    "\ufff0\001\002\000\006\026\201\033\114\001\002\000\004" +
    "\050\202\001\002\000\004\034\203\001\002\000\014\035" +
    "\ufffe\040\014\053\020\054\017\056\004\001\002\000\004" +
    "\035\205\001\002\000\016\002\uffef\035\uffef\040\uffef\053" +
    "\uffef\054\uffef\056\uffef\001\002\000\016\002\ufffb\035\ufffb" +
    "\040\ufffb\053\ufffb\054\ufffb\056\ufffb\001\002\000\004\002" +
    "\001\001\002\000\016\002\ufff6\035\ufff6\040\ufff6\053\ufff6" +
    "\054\ufff6\056\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\024\002\010\005\011\007\006\013\012\015" +
    "\015\017\004\020\014\021\007\022\005\001\001\000\004" +
    "\010\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\140\001\001\000\020\005\011\007\136\013\012" +
    "\017\004\020\014\021\007\022\005\001\001\000\002\001" +
    "\001\000\006\004\026\020\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\123\020\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\121\020\035" +
    "\001\001\000\004\010\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\116\020\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\111\011\110\012\112\020\035\001\001" +
    "\000\006\004\040\020\035\001\001\000\002\001\001\000" +
    "\006\004\107\020\035\001\001\000\006\004\102\020\035" +
    "\001\001\000\006\004\100\020\035\001\001\000\006\004" +
    "\075\020\035\001\001\000\006\004\074\020\035\001\001" +
    "\000\006\004\073\020\035\001\001\000\006\004\072\020" +
    "\035\001\001\000\006\004\071\020\035\001\001\000\006" +
    "\004\070\020\035\001\001\000\006\004\067\020\035\001" +
    "\001\000\006\004\066\020\035\001\001\000\006\004\065" +
    "\020\035\001\001\000\006\004\064\020\035\001\001\000" +
    "\006\004\063\020\035\001\001\000\006\004\062\020\035" +
    "\001\001\000\006\004\061\020\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\077\020\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\104\020\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\114\020\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\125\020\035\001" +
    "\001\000\002\001\001\000\004\023\130\001\001\000\024" +
    "\005\011\007\006\013\012\014\134\015\135\017\004\020" +
    "\014\021\007\022\005\001\001\000\002\001\001\000\006" +
    "\022\133\023\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\011\007\136\013\012" +
    "\017\004\020\014\021\007\022\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\151" +
    "\016\154\020\035\001\001\000\006\004\144\020\035\001" +
    "\001\000\006\004\146\020\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\163\020\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\111\011\156\012\112\020\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\011\007\006\013\012\014" +
    "\161\015\135\017\004\020\014\021\007\022\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\011\007\006" +
    "\013\012\014\167\015\135\017\004\020\014\021\007\022" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\111\012\177\020\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\005\011\007\006\013\012\014\175" +
    "\015\135\017\004\020\014\021\007\022\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\005\011\007\006\013" +
    "\012\014\203\015\135\017\004\020\014\021\007\022\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    public void semantic(Symbol cur_token, String n)
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exps ::= exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exps ::= exps coma exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // listExp ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // listExp ::= exps 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // invocarFuncion ::= identifier apar listExp cpar 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new InvocarFuncionAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocarFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= identifier 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= defaultt 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZDefaultNode(new FileLocation(aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= invocarFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= identifier igual exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DeclararParametroAstNode(new FileLocation(aleft, aright),a,b ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= nothing 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNothingNode(new FileLocation(aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Access2ListAstNode(new FileLocation(aleft, aright), a ,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp abra exp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccessStructAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= falsee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= truee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), true);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= numero 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZIntegerNode(new FileLocation(aleft, aright),Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= decimal 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNumericNode (new FileLocation(aleft, aright), Double.parseDouble(a )); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= cadena 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZStringNode(new FileLocation(aleft, aright),a ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new UnaryMinusNode(new FileLocation(aleft, aright), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= not exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= apar exp cpar 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT =  e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp tern exp dosp exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode c = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new TernarioAstNode(new FileLocation(aleft, aright),a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp or exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OrAstNode (new FileLocation(aleft, aright), a,b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp and exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AndAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp menorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp mayorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp mayorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp menorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp difQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotEqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp igualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new EqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp potenciar exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PotAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp dividir exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DivAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp por exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MultAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp modulo exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new RestAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp mas exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AddAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bodyIf ::= alla listaSentencia clla 
            {
              List<AstNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = l; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bodyIf",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentIf ::= iff apar exp cpar bodyIf elsee sentIf 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode l2 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

                                                            List<AstNode> list = new ArrayList<>();
                                                            list.add(l2);
                                                            RESULT = new IfAstNode(new FileLocation(eleft, eright),e, l,list );

                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentIf ::= iff apar exp cpar bodyIf elsee bodyIf 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> l2 = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IfAstNode(new FileLocation(eleft, eright),e,l,l2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentIf ::= iff apar exp cpar bodyIf 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IfAstNode(new FileLocation(eleft, eright),e,l, new ArrayList<>()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // endSent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // endSent ::= pComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expLeft ::= expLeft abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LeftAccess2AstNode(new FileLocation(eleft, eright), e,e1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expLeft ::= expLeft abra exp cbra 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LeftAccess1AstNode(new FileLocation(eleft, eright), e,e1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expLeft ::= identifier 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDLeftAstNode(new FileLocation(eleft, eright), e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declararFuncion ::= apar cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                     List<AstNode> aux = new ArrayList<>();
                     RESULT = new DeclararFuncionAstNode(new FileLocation(oleft, oright), aux,a) ;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declararFuncion ::= apar exp coma exps cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> c = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    List<AstNode> aux = new ArrayList<>();
                    aux.add(a);
                    aux.addAll(b);
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aleft), aux, c);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declararFuncion ::= apar exp cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    List<AstNode> aux = new ArrayList<>();
                    aux.add(a);
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aright), aux,b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declararFuncion ::= function apar listExp cpar alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aright), a,b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentReturn ::= returnn pComa 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReturnAstNode(new FileLocation(oleft, oright)) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentReturn",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentReturn ::= returnn exp endSent 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReturnAstNode(new FileLocation(oleft, oright), a) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentReturn",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignarFuncion ::= expLeft igual declararFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AssignFunctionAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignarFuncion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // asignacion ::= expLeft igual exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AssignAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= breakk endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new BreakAstNode(new FileLocation(aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentIf 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= sentReturn 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= asignarFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= invocarFuncion endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= asignacion endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencia 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSentencia ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaSentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSentencia ::= sentencias 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaSentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentencias 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> start_val = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

