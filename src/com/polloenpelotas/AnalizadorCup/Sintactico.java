
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 03 11:52:16 CST 2020
//----------------------------------------------------

package com.polloenpelotas.AnalizadorCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.*;
import com.polloenpelotas.language.nodes.CreateZTypes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 03 11:52:16 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\014\002\000\002\015\004\000\002\015\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\005\005\000\002\021\005\000\002" +
    "\017\005\000\002\017\004\000\002\016\011\000\002\016" +
    "\011\000\002\016\013\000\002\016\010\000\002\013\003" +
    "\000\002\013\006\000\002\013\010\000\002\010\003\000" +
    "\002\010\002\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\006\000\002\004\010\000\002\004\003\000" +
    "\002\004\005\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\020\006\000\002\011\003\000\002\011" +
    "\002\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\006\040\012\053\015\001\002\000\012\002" +
    "\ufff8\035\ufff8\040\ufff8\053\ufff8\001\002\000\012\002\ufffc" +
    "\035\ufffc\040\ufffc\053\ufffc\001\002\000\012\002\ufff9\035" +
    "\ufff9\040\ufff9\053\ufff9\001\002\000\004\002\166\001\002" +
    "\000\014\002\uffeb\027\111\035\uffeb\040\uffeb\053\uffeb\001" +
    "\002\000\006\030\120\031\121\001\002\000\010\025\034" +
    "\030\uffef\031\uffef\001\002\000\014\002\uffeb\027\111\035" +
    "\uffeb\040\uffeb\053\uffeb\001\002\000\010\002\000\040\012" +
    "\053\015\001\002\000\032\005\027\022\020\025\022\027" +
    "\032\036\030\037\025\040\031\041\016\042\017\043\024" +
    "\046\026\052\021\001\002\000\060\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\026" +
    "\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\035\uffd6\040\uffd6" +
    "\053\uffd6\001\002\000\060\002\uffd5\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\026\uffd5\027" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\035\uffd5\040\uffd5\053\uffd5" +
    "\001\002\000\030\005\027\022\020\025\022\036\030\037" +
    "\025\040\031\041\016\042\017\043\024\046\026\052\021" +
    "\001\002\000\060\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\026\uffcf\027\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\035\uffcf\040\uffcf\053\uffcf\001\002" +
    "\000\030\005\027\022\020\025\022\036\030\037\025\040" +
    "\031\041\016\042\017\043\024\046\026\052\021\001\002" +
    "\000\052\002\uffeb\004\054\005\046\006\051\007\055\010" +
    "\041\011\050\012\053\013\047\014\043\015\052\016\037" +
    "\017\042\020\045\021\044\027\111\031\040\035\uffeb\040" +
    "\uffeb\053\uffeb\001\002\000\060\002\uffd9\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\026\uffd9" +
    "\027\uffd9\031\uffd9\032\uffd9\033\uffd9\035\uffd9\040\uffd9\053" +
    "\uffd9\001\002\000\060\002\uffd8\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\026\uffd8\027\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\035\uffd8\040\uffd8\053\uffd8\001" +
    "\002\000\060\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\026\uffd2\027\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\035\uffd2\040\uffd2\053\uffd2\001\002\000" +
    "\030\005\027\022\020\025\022\036\030\037\025\040\031" +
    "\041\016\042\017\043\024\046\026\052\021\001\002\000" +
    "\060\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017" +
    "\uffd7\020\uffd7\021\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\035\uffd7\040\uffd7\053\uffd7\001\002\000\064\002" +
    "\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020" +
    "\uffce\021\uffce\025\034\026\uffce\027\uffce\030\035\031\uffce" +
    "\032\uffce\033\uffce\035\uffce\040\uffce\053\uffce\001\002\000" +
    "\012\002\ufff4\035\ufff4\040\ufff4\053\ufff4\001\002\000\060" +
    "\002\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\035\uffd0\040\uffd0\053\uffd0\001\002\000\032\005\027" +
    "\022\020\025\022\026\uffcb\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\060" +
    "\002\uffd1\004\054\005\046\006\051\007\055\010\041\011" +
    "\050\012\053\013\047\014\043\015\052\016\037\017\042" +
    "\020\045\021\044\026\uffd1\027\uffd1\031\040\032\uffd1\033" +
    "\uffd1\035\uffd1\040\uffd1\053\uffd1\001\002\000\030\005\027" +
    "\022\020\025\022\036\030\037\025\040\031\041\016\042" +
    "\017\043\024\046\026\052\021\001\002\000\032\005\027" +
    "\022\020\025\022\031\073\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\060" +
    "\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\041\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\026\uffe6\027\uffe6\031\040\032\uffe6\033" +
    "\uffe6\035\uffe6\040\uffe6\053\uffe6\001\002\000\060\002\uffea" +
    "\004\uffea\005\uffea\006\051\007\055\010\041\011\050\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\026\uffea\027\uffea\031\040\032\uffea\033\uffea\035" +
    "\uffea\040\uffea\053\uffea\001\002\000\060\002\uffe4\004\054" +
    "\005\046\006\051\007\055\010\041\011\050\012\uffe4\013" +
    "\uffe4\014\043\015\052\016\037\017\042\020\uffe4\021\uffe4" +
    "\026\uffe4\027\uffe4\031\040\032\uffe4\033\uffe4\035\uffe4\040" +
    "\uffe4\053\uffe4\001\002\000\060\002\uffe1\004\054\005\046" +
    "\006\051\007\055\010\041\011\050\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\026\uffe1" +
    "\027\uffe1\031\040\032\uffe1\033\uffe1\035\uffe1\040\uffe1\053" +
    "\uffe1\001\002\000\060\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\041\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\026\uffe7\027\uffe7" +
    "\031\040\032\uffe7\033\uffe7\035\uffe7\040\uffe7\053\uffe7\001" +
    "\002\000\060\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\010\041\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\021\uffe8\026\uffe8\027\uffe8\031\040" +
    "\032\uffe8\033\uffe8\035\uffe8\040\uffe8\053\uffe8\001\002\000" +
    "\060\002\uffe3\004\054\005\046\006\051\007\055\010\041" +
    "\011\050\012\uffe3\013\uffe3\014\043\015\052\016\037\017" +
    "\042\020\uffe3\021\uffe3\026\uffe3\027\uffe3\031\040\032\uffe3" +
    "\033\uffe3\035\uffe3\040\uffe3\053\uffe3\001\002\000\060\002" +
    "\uffe9\004\uffe9\005\uffe9\006\051\007\055\010\041\011\050" +
    "\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\026\uffe9\027\uffe9\031\040\032\uffe9\033\uffe9" +
    "\035\uffe9\040\uffe9\053\uffe9\001\002\000\060\002\uffde\004" +
    "\054\005\046\006\051\007\055\010\041\011\050\012\053" +
    "\013\047\014\043\015\052\016\037\017\042\020\uffde\021" +
    "\uffde\026\uffde\027\uffde\031\040\032\uffde\033\uffde\035\uffde" +
    "\040\uffde\053\uffde\001\002\000\060\002\uffdd\004\054\005" +
    "\046\006\051\007\055\010\041\011\050\012\053\013\047" +
    "\014\043\015\052\016\037\017\042\020\045\021\uffdd\026" +
    "\uffdd\027\uffdd\031\040\032\uffdd\033\uffdd\035\uffdd\040\uffdd" +
    "\053\uffdd\001\002\000\060\002\uffe0\004\054\005\046\006" +
    "\051\007\055\010\041\011\050\012\uffe0\013\uffe0\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\026\uffe0\027" +
    "\uffe0\031\040\032\uffe0\033\uffe0\035\uffe0\040\uffe0\053\uffe0" +
    "\001\002\000\060\002\uffe2\004\054\005\046\006\051\007" +
    "\055\010\041\011\050\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\026\uffe2\027\uffe2\031" +
    "\040\032\uffe2\033\uffe2\035\uffe2\040\uffe2\053\uffe2\001\002" +
    "\000\060\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\026\uffe5\027\uffe5\031\040\032" +
    "\uffe5\033\uffe5\035\uffe5\040\uffe5\053\uffe5\001\002\000\030" +
    "\005\027\022\020\025\022\036\030\037\025\040\031\041" +
    "\016\042\017\043\024\046\026\052\021\001\002\000\042" +
    "\004\054\005\046\006\051\007\055\010\041\011\050\012" +
    "\053\013\047\014\043\015\052\016\037\017\042\020\045" +
    "\021\044\031\040\032\075\001\002\000\060\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\035\uffd4" +
    "\040\uffd4\053\uffd4\001\002\000\042\004\054\005\046\006" +
    "\051\007\055\010\041\011\050\012\053\013\047\014\043" +
    "\015\052\016\037\017\042\020\045\021\044\031\040\032" +
    "\077\001\002\000\004\032\100\001\002\000\060\002\uffd3" +
    "\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\033\uffd3\035" +
    "\uffd3\040\uffd3\053\uffd3\001\002\000\060\002\uffdf\004\054" +
    "\005\046\006\051\007\055\010\041\011\050\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\026\uffdf\027\uffdf\031\040\032\uffdf\033\uffdf\035\uffdf\040" +
    "\uffdf\053\uffdf\001\002\000\004\026\107\001\002\000\044" +
    "\004\054\005\046\006\051\007\055\010\041\011\050\012" +
    "\053\013\047\014\043\015\052\016\037\017\042\020\045" +
    "\021\044\026\uffc9\031\040\033\uffc9\001\002\000\006\026" +
    "\uffcc\033\105\001\002\000\030\005\027\022\020\025\022" +
    "\036\030\037\025\040\031\041\016\042\017\043\024\046" +
    "\026\052\021\001\002\000\044\004\054\005\046\006\051" +
    "\007\055\010\041\011\050\012\053\013\047\014\043\015" +
    "\052\016\037\017\042\020\045\021\044\026\uffca\031\040" +
    "\033\uffca\001\002\000\060\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\026\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\040\uffcd\053\uffcd" +
    "\001\002\000\060\002\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\uffda\020\uffda\021\uffda\026\uffda\027\uffda\031" +
    "\040\032\uffda\033\uffda\035\uffda\040\uffda\053\uffda\001\002" +
    "\000\012\002\uffec\035\uffec\040\uffec\053\uffec\001\002\000" +
    "\012\002\ufff5\035\ufff5\040\ufff5\053\ufff5\001\002\000\042" +
    "\004\054\005\046\006\051\007\055\010\041\011\050\012" +
    "\053\013\047\014\043\015\052\016\037\017\042\020\045" +
    "\021\044\026\114\031\040\001\002\000\060\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc" +
    "\040\uffdc\053\uffdc\001\002\000\060\002\uffdb\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\026" +
    "\uffdb\027\uffdb\031\040\032\uffdb\033\uffdb\035\uffdb\040\uffdb" +
    "\053\uffdb\001\002\000\012\002\ufffd\035\ufffd\040\ufffd\053" +
    "\ufffd\001\002\000\012\002\ufffa\035\ufffa\040\ufffa\053\ufffa" +
    "\001\002\000\032\005\027\022\020\025\131\036\030\037" +
    "\025\040\031\041\016\042\017\043\024\046\026\047\132" +
    "\052\021\001\002\000\032\005\027\022\020\025\022\031" +
    "\122\036\030\037\025\040\031\041\016\042\017\043\024" +
    "\046\026\052\021\001\002\000\030\005\027\022\020\025" +
    "\022\036\030\037\025\040\031\041\016\042\017\043\024" +
    "\046\026\052\021\001\002\000\042\004\054\005\046\006" +
    "\051\007\055\010\041\011\050\012\053\013\047\014\043" +
    "\015\052\016\037\017\042\020\045\021\044\031\040\032" +
    "\124\001\002\000\006\030\uffee\031\uffee\001\002\000\042" +
    "\004\054\005\046\006\051\007\055\010\041\011\050\012" +
    "\053\013\047\014\043\015\052\016\037\017\042\020\045" +
    "\021\044\031\040\032\126\001\002\000\004\032\127\001" +
    "\002\000\006\030\uffed\031\uffed\001\002\000\052\002\ufff7" +
    "\004\054\005\046\006\051\007\055\010\041\011\050\012" +
    "\053\013\047\014\043\015\052\016\037\017\042\020\045" +
    "\021\044\027\ufff7\031\040\035\ufff7\040\ufff7\053\ufff7\001" +
    "\002\000\032\005\027\022\020\025\022\026\144\036\030" +
    "\037\025\040\031\041\016\042\017\043\024\046\026\052" +
    "\021\001\002\000\004\025\134\001\002\000\012\002\ufff6" +
    "\035\ufff6\040\ufff6\053\ufff6\001\002\000\032\005\027\022" +
    "\020\025\022\026\uffcb\036\030\037\025\040\031\041\016" +
    "\042\017\043\024\046\026\052\021\001\002\000\004\026" +
    "\136\001\002\000\004\034\137\001\002\000\010\035\ufffe" +
    "\040\012\053\015\001\002\000\004\035\142\001\002\000" +
    "\010\035\uffff\040\012\053\015\001\002\000\012\002\ufff3" +
    "\035\ufff3\040\ufff3\053\ufff3\001\002\000\044\004\054\005" +
    "\046\006\051\007\055\010\041\011\050\012\053\013\047" +
    "\014\043\015\052\016\037\017\042\020\045\021\044\026" +
    "\152\031\040\033\151\001\002\000\004\050\145\001\002" +
    "\000\004\034\146\001\002\000\010\035\ufffe\040\012\053" +
    "\015\001\002\000\004\035\150\001\002\000\012\002\ufff0" +
    "\035\ufff0\040\ufff0\053\ufff0\001\002\000\030\005\027\022" +
    "\020\025\022\036\030\037\025\040\031\041\016\042\017" +
    "\043\024\046\026\052\021\001\002\000\054\002\uffdc\004" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\027\uffdc\031\uffdc\035\uffdc\040\uffdc\050\153\053\uffdc" +
    "\001\002\000\004\034\154\001\002\000\010\035\ufffe\040" +
    "\012\053\015\001\002\000\004\035\156\001\002\000\012" +
    "\002\ufff2\035\ufff2\040\ufff2\053\ufff2\001\002\000\006\026" +
    "\160\033\105\001\002\000\004\050\161\001\002\000\004" +
    "\034\162\001\002\000\010\035\ufffe\040\012\053\015\001" +
    "\002\000\004\035\164\001\002\000\012\002\ufff1\035\ufff1" +
    "\040\ufff1\053\ufff1\001\002\000\012\002\ufffb\035\ufffb\040" +
    "\ufffb\053\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\164\000\022\002\006\005\007\007\004\013\010\015" +
    "\013\017\003\020\012\021\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\116\001\001\000\016\005\007\007\115\013" +
    "\010\017\003\020\012\021\005\001\001\000\006\004\022" +
    "\020\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\114\020\032\001\001\000\002\001\001\000\006" +
    "\004\112\020\032\001\001\000\004\010\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\107\020\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\102" +
    "\011\101\012\103\020\032\001\001\000\006\004\035\020" +
    "\032\001\001\000\002\001\001\000\006\004\100\020\032" +
    "\001\001\000\006\004\073\020\032\001\001\000\006\004" +
    "\071\020\032\001\001\000\006\004\070\020\032\001\001" +
    "\000\006\004\067\020\032\001\001\000\006\004\066\020" +
    "\032\001\001\000\006\004\065\020\032\001\001\000\006" +
    "\004\064\020\032\001\001\000\006\004\063\020\032\001" +
    "\001\000\006\004\062\020\032\001\001\000\006\004\061" +
    "\020\032\001\001\000\006\004\060\020\032\001\001\000" +
    "\006\004\057\020\032\001\001\000\006\004\056\020\032" +
    "\001\001\000\006\004\055\020\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\075\020\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\105\020\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\127\016\132\020\032\001\001\000\006\004\122\020" +
    "\032\001\001\000\006\004\124\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\142" +
    "\020\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\102\011\134\012\103\020\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\007\007\004\013" +
    "\010\014\137\015\140\017\003\020\012\021\005\001\001" +
    "\000\002\001\001\000\016\005\007\007\115\013\010\017" +
    "\003\020\012\021\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\005" +
    "\007\007\004\013\010\014\146\015\140\017\003\020\012" +
    "\021\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\102\012\156\020\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\007\007\004\013\010\014" +
    "\154\015\140\017\003\020\012\021\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\007\007\004\013\010" +
    "\014\162\015\140\017\003\020\012\021\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    public void semantic(Symbol cur_token, String n)
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exps ::= exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exps ::= exps coma exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // listExp ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listExp ::= exps 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // invocarFuncion ::= identifier apar listExp cpar 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new InvocarFuncionAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocarFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= identifier 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= defaultt 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZDefaultNode(new FileLocation(aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= invocarFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= identifier igual exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DeclararParametroAstNode(new FileLocation(aleft, aright),a,b ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= nothing 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNothingNode(new FileLocation(aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Access2ListAstNode(new FileLocation(aleft, aright), a ,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp abra exp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccessStructAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= falsee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= truee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), true);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= numero 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZIntegerNode(new FileLocation(aleft, aright),Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= decimal 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNumericNode (new FileLocation(aleft, aright), Double.parseDouble(a )); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= cadena 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZStringNode(new FileLocation(aleft, aright),a ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new UnaryMinusNode(new FileLocation(aleft, aright), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= not exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= apar exp cpar 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT =  e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp or exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OrAstNode (new FileLocation(aleft, aright), a,b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp and exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AndAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp menorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp mayorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp mayorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp menorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp difQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotEqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp igualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new EqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp potenciar exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PotAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp dividir exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DivAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp por exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MultAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp modulo exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= exp menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new RestAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= exp mas exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AddAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // endSent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // endSent ::= pComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expLeft ::= expLeft abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LeftAccess2AstNode(new FileLocation(eleft, eright), e,e1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expLeft ::= expLeft abra exp cbra 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LeftAccess1AstNode(new FileLocation(eleft, eright), e,e1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expLeft ::= identifier 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDLeftAstNode(new FileLocation(eleft, eright), e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declararFuncion ::= apar cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                     List<AstNode> aux = new ArrayList<>();
                     RESULT = new DeclararFuncionAstNode(new FileLocation(oleft, oright), aux,a) ;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declararFuncion ::= apar exp coma exps cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> c = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    List<AstNode> aux = new ArrayList<>();
                    aux.add(a);
                    aux.addAll(b);
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aleft), aux, c);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declararFuncion ::= apar exp cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    List<AstNode> aux = new ArrayList<>();
                    aux.add(a);
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aright), aux,b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declararFuncion ::= function apar listExp cpar alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aright), a,b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentReturn ::= returnn pComa 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReturnAstNode(new FileLocation(oleft, oright)) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentReturn",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentReturn ::= returnn exp endSent 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReturnAstNode(new FileLocation(oleft, oright), a) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentReturn",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // asignarFuncion ::= expLeft igual declararFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AssignFunctionAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignarFuncion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // asignacion ::= expLeft igual exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AssignAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= sentReturn 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= asignarFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= invocarFuncion endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= asignacion endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencia 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSentencia ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaSentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSentencia ::= sentencias 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaSentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentencias 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> start_val = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

