
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 10 15:47:20 CST 2020
//----------------------------------------------------

package com.polloenpelotas.AnalizadorCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;
import com.polloenpelotas.language.nodes.*;
import com.polloenpelotas.language.FileLocation;
import com.polloenpelotas.language.nodes.Instructions.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.*;
import com.polloenpelotas.language.nodes.CreateZTypes.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.ArithmeticOperations.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.EqualityOperations.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.LogicalOperations.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.MatrixOperations.*;
import com.polloenpelotas.language.nodes.ExpressionsOperations.RelationalOperations.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Mar 10 15:47:20 CST 2020
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\014" +
    "\003\000\002\014\002\000\002\015\004\000\002\015\003" +
    "\000\002\007\004\000\002\007\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\007\003\000\002\007\004\000\002\007\003\000\002\007" +
    "\004\000\002\005\005\000\002\021\005\000\002\017\005" +
    "\000\002\017\004\000\002\016\011\000\002\016\011\000" +
    "\002\016\013\000\002\016\010\000\002\013\003\000\002" +
    "\013\006\000\002\013\010\000\002\010\003\000\002\010" +
    "\002\000\002\022\007\000\002\022\011\000\002\022\011" +
    "\000\002\023\005\000\002\024\010\000\002\024\011\000" +
    "\002\024\012\000\002\024\011\000\002\027\004\000\002" +
    "\027\003\000\002\026\006\000\002\025\005\000\002\030" +
    "\011\000\002\031\012\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\007" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\006\000\002\004" +
    "\010\000\002\004\010\000\002\004\007\000\002\004\007" +
    "\000\002\004\003\000\002\004\005\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\020\006\000\002" +
    "\011\003\000\002\011\002\000\002\012\005\000\002\012" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\022\040\004\053\020\054\017\056\005\057" +
    "\007\061\011\062\013\063\022\001\002\000\010\025\053" +
    "\030\uffe9\031\uffe9\001\002\000\034\002\uffe5\027\030\035" +
    "\uffe5\040\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\024\002" +
    "\000\040\004\053\020\054\017\056\005\057\007\061\011" +
    "\062\013\063\022\001\002\000\004\025\245\001\002\000" +
    "\032\002\ufff3\035\ufff3\040\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\001" +
    "\002\000\034\002\uffe5\027\030\035\uffe5\040\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\001\002\000\034\002\uffe5\027\030\035\uffe5" +
    "\040\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000\004\025\235" +
    "\001\002\000\004\002\234\001\002\000\032\002\ufffc\035" +
    "\ufffc\040\ufffc\052\ufffc\053\ufffc\054\ufffc\056\ufffc\057\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002\000\032\002" +
    "\ufff9\035\ufff9\040\ufff9\052\ufff9\053\ufff9\054\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\004\025\222\001\002\000\032\005\047\022\040\025\042" +
    "\027\220\036\050\037\045\040\051\041\035\042\037\043" +
    "\044\046\046\052\041\001\002\000\032\002\ufff7\035\ufff7" +
    "\040\ufff7\052\ufff7\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000\004\034\210" +
    "\001\002\000\006\030\033\031\034\001\002\000\034\002" +
    "\uffe5\027\030\035\uffe5\040\uffe5\052\uffe5\053\uffe5\054\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\001" +
    "\002\000\032\002\ufff8\035\ufff8\040\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\001\002\000\034\002\uffe5\027\030\035\uffe5\040\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\001\002\000\032\002\ufff5\035\ufff5" +
    "\040\ufff5\052\ufff5\053\ufff5\054\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\001\002\000\032\002\uffe6" +
    "\035\uffe6\040\uffe6\052\uffe6\053\uffe6\054\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\032" +
    "\002\ufffa\035\ufffa\040\ufffa\052\ufffa\053\ufffa\054\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\001\002" +
    "\000\032\002\ufff2\035\ufff2\040\ufff2\052\ufff2\053\ufff2\054" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\001\002\000\032\005\047\022\040\025\153\036\050\037" +
    "\045\040\051\041\035\042\037\043\044\046\046\047\154" +
    "\052\041\001\002\000\032\005\047\022\040\025\042\031" +
    "\036\036\050\037\045\040\051\041\035\042\037\043\044" +
    "\046\046\052\041\001\002\000\104\002\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023" +
    "\uffc1\024\uffc1\026\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\035\uffc1\040\uffc1\052\uffc1\053\uffc1\054\uffc1\056\uffc1\057" +
    "\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\001\002\000\030" +
    "\005\047\022\040\025\042\036\050\037\045\040\051\041" +
    "\035\042\037\043\044\046\046\052\041\001\002\000\104" +
    "\002\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\031" +
    "\uffc0\032\uffc0\033\uffc0\035\uffc0\040\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063" +
    "\uffc0\001\002\000\030\005\047\022\040\025\042\036\050" +
    "\037\045\040\051\041\035\042\037\043\044\046\046\052" +
    "\041\001\002\000\104\002\uffb7\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7\024\uffb7" +
    "\026\uffb7\027\uffb7\031\uffb7\032\uffb7\033\uffb7\035\uffb7\040" +
    "\uffb7\052\uffb7\053\uffb7\054\uffb7\056\uffb7\057\uffb7\060\uffb7" +
    "\061\uffb7\062\uffb7\063\uffb7\001\002\000\030\005\047\022" +
    "\040\025\042\036\050\037\045\040\051\041\035\042\037" +
    "\043\044\046\046\052\041\001\002\000\044\004\074\005" +
    "\065\006\071\007\075\010\061\011\070\012\073\013\067" +
    "\014\063\015\072\016\056\017\062\020\066\021\064\023" +
    "\060\031\057\032\143\001\002\000\104\002\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\023\uffc4\024\uffc4\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\035\uffc4\040\uffc4\052\uffc4\053\uffc4\054\uffc4\056\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\001\002\000" +
    "\104\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\031\uffc3\032\uffc3\033\uffc3\035\uffc3\040\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3" +
    "\063\uffc3\001\002\000\104\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\024" +
    "\uffba\026\uffba\027\uffba\031\uffba\032\uffba\033\uffba\035\uffba" +
    "\040\uffba\052\uffba\053\uffba\054\uffba\056\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\001\002\000\030\005\047" +
    "\022\040\025\042\036\050\037\045\040\051\041\035\042" +
    "\037\043\044\046\046\052\041\001\002\000\104\002\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\023\uffc2\024\uffc2\026\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\035\uffc2\040\uffc2\052\uffc2\053\uffc2\054\uffc2" +
    "\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\001" +
    "\002\000\110\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025\053" +
    "\026\uffb6\027\uffb6\030\054\031\uffb6\032\uffb6\033\uffb6\035" +
    "\uffb6\040\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6\057\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\001\002\000\104\002" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\031\uffb8" +
    "\032\uffb8\033\uffb8\035\uffb8\040\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\001\002\000\032\005\047\022\040\025\042\026\uffb3\036" +
    "\050\037\045\040\051\041\035\042\037\043\044\046\046" +
    "\052\041\001\002\000\030\005\047\022\040\025\042\036" +
    "\050\037\045\040\051\041\035\042\037\043\044\046\046" +
    "\052\041\001\002\000\104\002\uffb9\004\074\005\065\006" +
    "\071\007\075\010\061\011\070\012\073\013\067\014\063" +
    "\015\072\016\056\017\062\020\066\021\064\023\060\024" +
    "\uffb9\026\uffb9\027\uffb9\031\057\032\uffb9\033\uffb9\035\uffb9" +
    "\040\uffb9\052\uffb9\053\uffb9\054\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\001\002\000\030\005\047" +
    "\022\040\025\042\036\050\037\045\040\051\041\035\042" +
    "\037\043\044\046\046\052\041\001\002\000\034\005\047" +
    "\022\040\025\042\031\116\033\117\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\104\002\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\061\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\031\057\032\uffd2\033\uffd2\035\uffd2\040\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\001\002\000\104\002\uffd6\004\uffd6\005\uffd6" +
    "\006\071\007\075\010\061\011\070\012\uffd6\013\uffd6\014" +
    "\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\026\uffd6\027\uffd6\031\057\032\uffd6\033\uffd6\035" +
    "\uffd6\040\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\057\uffd6" +
    "\060\uffd6\061\uffd6\062\uffd6\063\uffd6\001\002\000\104\002" +
    "\uffd0\004\074\005\065\006\071\007\075\010\061\011\070" +
    "\012\uffd0\013\uffd0\014\063\015\072\016\056\017\062\020" +
    "\uffd0\021\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0\031\057" +
    "\032\uffd0\033\uffd0\035\uffd0\040\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\001\002\000\104\002\uffcd\004\074\005\065\006\071\007" +
    "\075\010\061\011\070\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\026" +
    "\uffcd\027\uffcd\031\057\032\uffcd\033\uffcd\035\uffcd\040\uffcd" +
    "\052\uffcd\053\uffcd\054\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\062\uffcd\063\uffcd\001\002\000\104\002\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\061\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\023\uffd3\024\uffd3\026\uffd3\027\uffd3\031\057\032\uffd3\033" +
    "\uffd3\035\uffd3\040\uffd3\052\uffd3\053\uffd3\054\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\001\002\000" +
    "\104\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\061" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\026\uffd4\027\uffd4" +
    "\031\057\032\uffd4\033\uffd4\035\uffd4\040\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4" +
    "\063\uffd4\001\002\000\104\002\uffcf\004\074\005\065\006" +
    "\071\007\075\010\061\011\070\012\uffcf\013\uffcf\014\063" +
    "\015\072\016\056\017\062\020\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\026\uffcf\027\uffcf\031\057\032\uffcf\033\uffcf\035\uffcf" +
    "\040\uffcf\052\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\001\002\000\104\002\uffca" +
    "\004\074\005\065\006\071\007\075\010\061\011\070\012" +
    "\073\013\067\014\063\015\072\016\056\017\062\020\uffca" +
    "\021\uffca\023\uffca\024\uffca\026\uffca\027\uffca\031\057\032" +
    "\uffca\033\uffca\035\uffca\040\uffca\052\uffca\053\uffca\054\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\001" +
    "\002\000\104\002\uffd5\004\uffd5\005\uffd5\006\071\007\075" +
    "\010\061\011\070\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\026\uffd5" +
    "\027\uffd5\031\057\032\uffd5\033\uffd5\035\uffd5\040\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\001\002\000\104\002\uffc9\004\074\005" +
    "\065\006\071\007\075\010\061\011\070\012\073\013\067" +
    "\014\063\015\072\016\056\017\062\020\066\021\uffc9\023" +
    "\uffc9\024\uffc9\026\uffc9\027\uffc9\031\057\032\uffc9\033\uffc9" +
    "\035\uffc9\040\uffc9\052\uffc9\053\uffc9\054\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\001\002\000\104" +
    "\002\uffcc\004\074\005\065\006\071\007\075\010\061\011" +
    "\070\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\031" +
    "\057\032\uffcc\033\uffcc\035\uffcc\040\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063" +
    "\uffcc\001\002\000\104\002\uffce\004\074\005\065\006\071" +
    "\007\075\010\061\011\070\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce" +
    "\026\uffce\027\uffce\031\057\032\uffce\033\uffce\035\uffce\040" +
    "\uffce\052\uffce\053\uffce\054\uffce\056\uffce\057\uffce\060\uffce" +
    "\061\uffce\062\uffce\063\uffce\001\002\000\104\002\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\031\057\032\uffd1" +
    "\033\uffd1\035\uffd1\040\uffd1\052\uffd1\053\uffd1\054\uffd1\056" +
    "\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002" +
    "\000\044\004\074\005\065\006\071\007\075\010\061\011" +
    "\070\012\073\013\067\014\063\015\072\016\056\017\062" +
    "\020\066\021\064\023\060\024\114\031\057\001\002\000" +
    "\030\005\047\022\040\025\042\036\050\037\045\040\051" +
    "\041\035\042\037\043\044\046\046\052\041\001\002\000" +
    "\104\002\uffc8\004\074\005\065\006\071\007\075\010\061" +
    "\011\070\012\073\013\067\014\063\015\072\016\056\017" +
    "\062\020\066\021\064\023\060\024\uffc8\026\uffc8\027\uffc8" +
    "\031\057\032\uffc8\033\uffc8\035\uffc8\040\uffc8\052\uffc8\053" +
    "\uffc8\054\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8" +
    "\063\uffc8\001\002\000\030\005\047\022\040\025\042\036" +
    "\050\037\045\040\051\041\035\042\037\043\044\046\046" +
    "\052\041\001\002\000\030\005\047\022\040\025\042\036" +
    "\050\037\045\040\051\041\035\042\037\043\044\046\046" +
    "\052\041\001\002\000\046\004\074\005\065\006\071\007" +
    "\075\010\061\011\070\012\073\013\067\014\063\015\072" +
    "\016\056\017\062\020\066\021\064\023\060\031\057\032" +
    "\122\033\121\001\002\000\032\005\047\022\040\025\042" +
    "\032\124\036\050\037\045\040\051\041\035\042\037\043" +
    "\044\046\046\052\041\001\002\000\104\002\uffbf\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\024\uffbf\026\uffbf\027\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\035\uffbf\040\uffbf\052\uffbf\053\uffbf\054\uffbf\056\uffbf" +
    "\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\001\002\000" +
    "\044\004\074\005\065\006\071\007\075\010\061\011\070" +
    "\012\073\013\067\014\063\015\072\016\056\017\062\020" +
    "\066\021\064\023\060\031\057\032\125\001\002\000\104" +
    "\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\035\uffbc\040\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\001\002\000\104\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd" +
    "\026\uffbd\027\uffbd\031\uffbd\032\uffbd\033\uffbd\035\uffbd\040" +
    "\uffbd\052\uffbd\053\uffbd\054\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\001\002\000\044\004\074\005" +
    "\065\006\071\007\075\010\061\011\070\012\073\013\067" +
    "\014\063\015\072\016\056\017\062\020\066\021\064\023" +
    "\060\031\057\032\127\001\002\000\104\002\uffbb\004\uffbb" +
    "\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb" +
    "\023\uffbb\024\uffbb\026\uffbb\027\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\035\uffbb\040\uffbb\052\uffbb\053\uffbb\054\uffbb\056\uffbb" +
    "\057\uffbb\060\uffbb\061\uffbb\062\uffbb\063\uffbb\001\002\000" +
    "\044\004\074\005\065\006\071\007\075\010\061\011\070" +
    "\012\073\013\067\014\063\015\072\016\056\017\062\020" +
    "\066\021\064\023\060\031\057\032\131\001\002\000\004" +
    "\032\132\001\002\000\104\002\uffbe\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023\uffbe\024" +
    "\uffbe\026\uffbe\027\uffbe\031\uffbe\032\uffbe\033\uffbe\035\uffbe" +
    "\040\uffbe\052\uffbe\053\uffbe\054\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\001\002\000\104\002\uffcb" +
    "\004\074\005\065\006\071\007\075\010\061\011\070\012" +
    "\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\031\057\032" +
    "\uffcb\033\uffcb\035\uffcb\040\uffcb\052\uffcb\053\uffcb\054\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\001" +
    "\002\000\004\026\141\001\002\000\046\004\074\005\065" +
    "\006\071\007\075\010\061\011\070\012\073\013\067\014" +
    "\063\015\072\016\056\017\062\020\066\021\064\023\060" +
    "\026\uffb1\031\057\033\uffb1\001\002\000\006\026\uffb4\033" +
    "\137\001\002\000\030\005\047\022\040\025\042\036\050" +
    "\037\045\040\051\041\035\042\037\043\044\046\046\052" +
    "\041\001\002\000\046\004\074\005\065\006\071\007\075" +
    "\010\061\011\070\012\073\013\067\014\063\015\072\016" +
    "\056\017\062\020\066\021\064\023\060\026\uffb2\031\057" +
    "\033\uffb2\001\002\000\104\002\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\023\uffb5\024" +
    "\uffb5\026\uffb5\027\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5" +
    "\040\uffb5\052\uffb5\053\uffb5\054\uffb5\056\uffb5\057\uffb5\060" +
    "\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002\000\104\002\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\031\057\032" +
    "\uffc5\033\uffc5\035\uffc5\040\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\001" +
    "\002\000\006\030\uffe8\031\uffe8\001\002\000\044\004\074" +
    "\005\065\006\071\007\075\010\061\011\070\012\073\013" +
    "\067\014\063\015\072\016\056\017\062\020\066\021\064" +
    "\023\060\026\145\031\057\001\002\000\104\002\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\023\uffc7\024\uffc7\026\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\035\uffc7\040\uffc7\052\uffc7\053\uffc7\054\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002" +
    "\000\104\002\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\031\057\032\uffc6\033\uffc6\035\uffc6\040\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062" +
    "\uffc6\063\uffc6\001\002\000\044\004\074\005\065\006\071" +
    "\007\075\010\061\011\070\012\073\013\067\014\063\015" +
    "\072\016\056\017\062\020\066\021\064\023\060\031\057" +
    "\032\150\001\002\000\004\032\151\001\002\000\006\030" +
    "\uffe7\031\uffe7\001\002\000\074\002\ufff1\004\074\005\065" +
    "\006\071\007\075\010\061\011\070\012\073\013\067\014" +
    "\063\015\072\016\056\017\062\020\066\021\064\023\060" +
    "\027\ufff1\031\057\035\ufff1\040\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\001\002\000\032\005\047\022\040\025\042\026\167\036" +
    "\050\037\045\040\051\041\035\042\037\043\044\046\046" +
    "\052\041\001\002\000\004\025\156\001\002\000\032\002" +
    "\ufff0\035\ufff0\040\ufff0\052\ufff0\053\ufff0\054\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\001\002\000" +
    "\032\005\047\022\040\025\042\026\uffb3\036\050\037\045" +
    "\040\051\041\035\042\037\043\044\046\046\052\041\001" +
    "\002\000\004\026\160\001\002\000\004\034\161\001\002" +
    "\000\024\035\ufffe\040\004\053\020\054\017\056\005\057" +
    "\007\061\011\062\013\063\022\001\002\000\004\035\165" +
    "\001\002\000\030\035\uffff\040\004\052\uffff\053\020\054" +
    "\017\056\005\057\007\060\uffff\061\011\062\013\063\022" +
    "\001\002\000\032\002\ufffd\035\ufffd\040\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\032\002\uffed\035\uffed\040\uffed\052" +
    "\uffed\053\uffed\054\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\001\002\000\046\004\074\005\065\006" +
    "\071\007\075\010\061\011\070\012\073\013\067\014\063" +
    "\015\072\016\056\017\062\020\066\021\064\023\060\026" +
    "\175\031\057\033\174\001\002\000\004\050\170\001\002" +
    "\000\004\034\171\001\002\000\024\035\ufffe\040\004\053" +
    "\020\054\017\056\005\057\007\061\011\062\013\063\022" +
    "\001\002\000\004\035\173\001\002\000\032\002\uffea\035" +
    "\uffea\040\uffea\052\uffea\053\uffea\054\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\001\002\000\030\005" +
    "\047\022\040\025\042\036\050\037\045\040\051\041\035" +
    "\042\037\043\044\046\046\052\041\001\002\000\076\002" +
    "\uffc7\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\023\uffc7\027\uffc7\031\uffc7\035\uffc7\040\uffc7" +
    "\050\176\052\uffc7\053\uffc7\054\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\004\034\177" +
    "\001\002\000\024\035\ufffe\040\004\053\020\054\017\056" +
    "\005\057\007\061\011\062\013\063\022\001\002\000\004" +
    "\035\201\001\002\000\032\002\uffec\035\uffec\040\uffec\052" +
    "\uffec\053\uffec\054\uffec\056\uffec\057\uffec\060\uffec\061\uffec" +
    "\062\uffec\063\uffec\001\002\000\006\026\203\033\137\001" +
    "\002\000\004\050\204\001\002\000\004\034\205\001\002" +
    "\000\024\035\ufffe\040\004\053\020\054\017\056\005\057" +
    "\007\061\011\062\013\063\022\001\002\000\004\035\207" +
    "\001\002\000\032\002\uffeb\035\uffeb\040\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb" +
    "\063\uffeb\001\002\000\024\035\ufffe\040\004\053\020\054" +
    "\017\056\005\057\007\061\011\062\013\063\022\001\002" +
    "\000\004\035\212\001\002\000\004\062\213\001\002\000" +
    "\004\025\214\001\002\000\030\005\047\022\040\025\042" +
    "\036\050\037\045\040\051\041\035\042\037\043\044\046" +
    "\046\052\041\001\002\000\044\004\074\005\065\006\071" +
    "\007\075\010\061\011\070\012\073\013\067\014\063\015" +
    "\072\016\056\017\062\020\066\021\064\023\060\026\216" +
    "\031\057\001\002\000\034\002\uffd7\027\uffd7\035\uffd7\040" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\001\002\000\074\002\uffe5\004" +
    "\074\005\065\006\071\007\075\010\061\011\070\012\073" +
    "\013\067\014\063\015\072\016\056\017\062\020\066\021" +
    "\064\023\060\027\030\031\057\035\uffe5\040\uffe5\052\uffe5" +
    "\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062" +
    "\uffe5\063\uffe5\001\002\000\032\002\uffee\035\uffee\040\uffee" +
    "\052\uffee\053\uffee\054\uffee\056\uffee\057\uffee\060\uffee\061" +
    "\uffee\062\uffee\063\uffee\001\002\000\032\002\uffef\035\uffef" +
    "\040\uffef\052\uffef\053\uffef\054\uffef\056\uffef\057\uffef\060" +
    "\uffef\061\uffef\062\uffef\063\uffef\001\002\000\030\005\047" +
    "\022\040\025\042\036\050\037\045\040\051\041\035\042" +
    "\037\043\044\046\046\052\041\001\002\000\044\004\074" +
    "\005\065\006\071\007\075\010\061\011\070\012\073\013" +
    "\067\014\063\015\072\016\056\017\062\020\066\021\064" +
    "\023\060\026\224\031\057\001\002\000\004\034\225\001" +
    "\002\000\024\035\ufffe\040\004\053\020\054\017\056\005" +
    "\057\007\061\011\062\013\063\022\001\002\000\034\002" +
    "\uffe4\035\uffe4\040\uffe4\052\uffe4\053\uffe4\054\uffe4\055\227" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\001" +
    "\002\000\006\034\225\054\017\001\002\000\032\002\uffe3" +
    "\035\uffe3\040\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002\000\032" +
    "\002\uffe2\035\uffe2\040\uffe2\052\uffe2\053\uffe2\054\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002" +
    "\000\004\035\233\001\002\000\034\002\uffe1\035\uffe1\040" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\063\uffe1\001\002\000\004\002" +
    "\001\001\002\000\030\005\047\022\040\025\042\036\050" +
    "\037\045\040\051\041\035\042\037\043\044\046\046\052" +
    "\041\001\002\000\044\004\074\005\065\006\071\007\075" +
    "\010\061\011\070\012\073\013\067\014\063\015\072\016" +
    "\056\017\062\020\066\021\064\023\060\026\237\031\057" +
    "\001\002\000\004\034\240\001\002\000\024\035\ufffe\040" +
    "\004\053\020\054\017\056\005\057\007\061\011\062\013" +
    "\063\022\001\002\000\004\035\242\001\002\000\032\002" +
    "\uffd8\035\uffd8\040\uffd8\052\uffd8\053\uffd8\054\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002\000" +
    "\032\002\ufffb\035\ufffb\040\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001" +
    "\002\000\032\002\ufff4\035\ufff4\040\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\063" +
    "\ufff4\001\002\000\030\005\047\022\040\025\042\036\050" +
    "\037\045\040\051\041\035\042\037\043\044\046\046\052" +
    "\041\001\002\000\044\004\074\005\065\006\071\007\075" +
    "\010\061\011\070\012\073\013\067\014\063\015\072\016" +
    "\056\017\062\020\066\021\064\023\060\026\247\031\057" +
    "\001\002\000\004\034\250\001\002\000\010\035\252\052" +
    "\255\060\256\001\002\000\010\035\265\052\255\060\256" +
    "\001\002\000\032\002\uffe0\035\uffe0\040\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\063\uffe0\001\002\000\004\035\264\001\002\000\010\035" +
    "\uffdb\052\uffdb\060\uffdb\001\002\000\004\024\262\001\002" +
    "\000\030\005\047\022\040\025\042\036\050\037\045\040" +
    "\051\041\035\042\037\043\044\046\046\052\041\001\002" +
    "\000\044\004\074\005\065\006\071\007\075\010\061\011" +
    "\070\012\073\013\067\014\063\015\072\016\056\017\062" +
    "\020\066\021\064\023\060\024\260\031\057\001\002\000" +
    "\030\035\ufffe\040\004\052\ufffe\053\020\054\017\056\005" +
    "\057\007\060\ufffe\061\011\062\013\063\022\001\002\000" +
    "\010\035\uffda\052\uffda\060\uffda\001\002\000\024\035\ufffe" +
    "\040\004\053\020\054\017\056\005\057\007\061\011\062" +
    "\013\063\022\001\002\000\004\035\uffd9\001\002\000\032" +
    "\002\uffdd\035\uffdd\040\uffdd\052\uffdd\053\uffdd\054\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002" +
    "\000\032\002\uffdf\035\uffdf\040\uffdf\052\uffdf\053\uffdf\054" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf" +
    "\001\002\000\004\035\270\001\002\000\010\035\uffdc\052" +
    "\uffdc\060\uffdc\001\002\000\032\002\uffde\035\uffde\040\uffde" +
    "\052\uffde\053\uffde\054\uffde\056\uffde\057\uffde\060\uffde\061" +
    "\uffde\062\uffde\063\uffde\001\002\000\032\002\ufff6\035\ufff6" +
    "\040\ufff6\052\ufff6\053\ufff6\054\ufff6\056\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\267\000\032\002\013\005\011\007\014\013\022\015" +
    "\005\017\024\020\025\021\015\022\020\024\026\030\007" +
    "\031\023\001\001\000\002\001\001\000\004\010\270\001" +
    "\001\000\026\005\011\007\163\013\022\017\024\020\025" +
    "\021\015\022\020\024\026\030\007\031\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\243\001\001" +
    "\000\004\010\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\216\020\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\031\001\001" +
    "\000\002\001\001\000\004\010\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\151\016\154\020\051\001\001\000\006\004" +
    "\042\020\051\001\001\000\002\001\001\000\006\004\146" +
    "\020\051\001\001\000\002\001\001\000\006\004\145\020" +
    "\051\001\001\000\002\001\001\000\006\004\143\020\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\141\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\134\011\133\012\135\020\051\001\001\000\006" +
    "\004\054\020\051\001\001\000\002\001\001\000\006\004" +
    "\132\020\051\001\001\000\006\004\117\020\051\001\001" +
    "\000\006\004\112\020\051\001\001\000\006\004\111\020" +
    "\051\001\001\000\006\004\110\020\051\001\001\000\006" +
    "\004\107\020\051\001\001\000\006\004\106\020\051\001" +
    "\001\000\006\004\105\020\051\001\001\000\006\004\104" +
    "\020\051\001\001\000\006\004\103\020\051\001\001\000" +
    "\006\004\102\020\051\001\001\000\006\004\101\020\051" +
    "\001\001\000\006\004\100\020\051\001\001\000\006\004" +
    "\077\020\051\001\001\000\006\004\076\020\051\001\001" +
    "\000\006\004\075\020\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\114\020\051\001\001\000\002\001\001\000\006" +
    "\004\127\020\051\001\001\000\006\004\125\020\051\001" +
    "\001\000\002\001\001\000\006\004\122\020\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\137\020\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\165\020\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\134\011\156\012\135\020\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\011\007\014\013\022\014\161\015\162\017\024\020\025" +
    "\021\015\022\020\024\026\030\007\031\023\001\001\000" +
    "\002\001\001\000\026\005\011\007\163\013\022\017\024" +
    "\020\025\021\015\022\020\024\026\030\007\031\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\005\011\007" +
    "\014\013\022\014\171\015\162\017\024\020\025\021\015" +
    "\022\020\024\026\030\007\031\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\134\012\201\020\051" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\011\007\014\013\022\014\177\015\162\017\024\020\025" +
    "\021\015\022\020\024\026\030\007\031\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\011\007\014\013" +
    "\022\014\205\015\162\017\024\020\025\021\015\022\020" +
    "\024\026\030\007\031\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\005\011\007\014\013\022\014\210" +
    "\015\162\017\024\020\025\021\015\022\020\024\026\030" +
    "\007\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\214\020\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\222\020" +
    "\051\001\001\000\002\001\001\000\004\023\225\001\001" +
    "\000\032\005\011\007\014\013\022\014\231\015\162\017" +
    "\024\020\025\021\015\022\020\024\026\030\007\031\023" +
    "\001\001\000\002\001\001\000\006\022\230\023\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\235\020" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\005\011\007\014\013\022\014\240\015\162\017\024\020" +
    "\025\021\015\022\020\024\026\030\007\031\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\245\020\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\252\026\253\027" +
    "\250\001\001\000\006\025\265\026\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\256\020\051\001\001\000\002\001\001" +
    "\000\032\005\011\007\014\013\022\014\260\015\162\017" +
    "\024\020\025\021\015\022\020\024\026\030\007\031\023" +
    "\001\001\000\002\001\001\000\032\005\011\007\014\013" +
    "\022\014\262\015\162\017\024\020\025\021\015\022\020" +
    "\024\026\030\007\031\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String salida="";

    //-------------------> Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    //-------------------> Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode!!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }


    public void semantic(Symbol cur_token, String n)
    {
        System.out.println("error semantico ");
    }


    public void semantic(String msg, Object obj) {}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exps ::= exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // exps ::= exps coma exp 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exps",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listExp ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listExp ::= exps 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // invocarFuncion ::= identifier apar listExp cpar 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new InvocarFuncionAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("invocarFuncion",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= identifier 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= defaultt 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZDefaultNode(new FileLocation(aleft,aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= invocarFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= identifier igual exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DeclararParametroAstNode(new FileLocation(aleft, aright),a,b ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= nothing 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNothingNode(new FileLocation(aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= exp abra coma exp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Access3MatrixAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp abra exp coma cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Access2MatrixAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp abra exp coma exp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode c = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Access1MatrixAstNode(new FileLocation(aleft, aright),a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new Access2ListAstNode(new FileLocation(aleft, aright), a ,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exp ::= exp abra exp cbra 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new AccessStructAstNode(new FileLocation(aleft, aright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exp ::= falsee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp ::= truee 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZBooleanNode (new FileLocation(aleft, aright), true);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp ::= numero 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZIntegerNode(new FileLocation(aleft, aright),Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= decimal 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZNumericNode (new FileLocation(aleft, aright), Double.parseDouble(a )); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= cadena 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new CreateZStringNode(new FileLocation(aleft, aright),a ); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new UnaryMinusNode(new FileLocation(aleft, aright), a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= not exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotAstNode(new FileLocation(aleft, aright),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= apar exp cpar 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT =  e; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp tern exp dosp exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode c = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new TernarioAstNode(new FileLocation(aleft, aright),a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= exp or exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new OrAstNode (new FileLocation(aleft, aright), a,b);  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp and exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AndAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp menorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp mayorQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp mayorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MayorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp menorIgualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MenorIgualAstNode (new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp difQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new NotEqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp igualQue exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new EqualToAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp potenciar exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new PotAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp dividir exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DivAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp por exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new MultAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp modulo exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ModAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp menos exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new RestAstNode(new FileLocation(aleft, aright), a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp mas exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AddAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sentDoWhile ::= doo alla listaSentencia clla whilee apar exp cpar 
            {
              AstNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DoWhileAstNode(new FileLocation(eleft,eright) ,e,l); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentDoWhile",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sentWhile ::= whilee apar exp cpar alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new WhileAstNode( new FileLocation(eleft, eright), e, l); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentWhile",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sentDefault ::= defaultt dosp listaSentencia 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new DefaultSwitchAstNode( new FileLocation(aleft, aright),l) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentDefault",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sentCase ::= casee exp dosp listaSentencia 
            {
              CaseSwitchAstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new CaseSwitchAstNode(new FileLocation(eleft, eright), e, l); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentCase",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listCases ::= sentCase 
            {
              List<CaseSwitchAstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CaseSwitchAstNode a = (CaseSwitchAstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= new ArrayList<CaseSwitchAstNode>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listCases ::= listCases sentCase 
            {
              List<CaseSwitchAstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<CaseSwitchAstNode> a = (List<CaseSwitchAstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		CaseSwitchAstNode b = (CaseSwitchAstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listCases",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentSwitch ::= switchh apar exp cpar alla sentDefault clla 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SwitchAstNode(new FileLocation(eleft, eright),e,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentSwitch",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentSwitch ::= switchh apar exp cpar alla listCases sentDefault clla 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<CaseSwitchAstNode> l = (List<CaseSwitchAstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode d = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SwitchAstNode(new FileLocation(eleft, eright),e,l,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentSwitch",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentSwitch ::= switchh apar exp cpar alla listCases clla 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<CaseSwitchAstNode> l = (List<CaseSwitchAstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new SwitchAstNode(new FileLocation(eleft, eright),e,l); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentSwitch",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // sentSwitch ::= switchh apar exp cpar alla clla 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		 RESULT = new SwitchAstNode(new FileLocation(eleft, eright),e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentSwitch",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bodyIf ::= alla listaSentencia clla 
            {
              List<AstNode> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = l; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bodyIf",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentIf ::= iff apar exp cpar bodyIf elsee sentIf 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode l2 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		

                                                            List<AstNode> list = new ArrayList<>();
                                                            list.add(l2);
                                                            RESULT = new IfAstNode(new FileLocation(eleft, eright),e, l,list );

                                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentIf ::= iff apar exp cpar bodyIf elsee bodyIf 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> l2 = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IfAstNode(new FileLocation(eleft, eright),e,l,l2); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentIf ::= iff apar exp cpar bodyIf 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> l = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new IfAstNode(new FileLocation(eleft, eright),e,l, new ArrayList<>()); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentIf",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // endSent ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // endSent ::= pComa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("endSent",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expLeft ::= expLeft abra abra exp cbra cbra 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new LeftAccess2AstNode(new FileLocation(eleft, eright), e,e1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expLeft ::= expLeft abra exp cbra 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		AstNode e = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode e1 = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LeftAccess1AstNode(new FileLocation(eleft, eright), e,e1); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expLeft ::= identifier 
            {
              AstNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new FindIDLeftAstNode(new FileLocation(eleft, eright), e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expLeft",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declararFuncion ::= apar cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                     List<AstNode> aux = new ArrayList<>();
                     RESULT = new DeclararFuncionAstNode(new FileLocation(oleft, oright), aux,a) ;
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declararFuncion ::= apar exp coma exps cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> c = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    List<AstNode> aux = new ArrayList<>();
                    aux.add(a);
                    aux.addAll(b);
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aleft), aux, c);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declararFuncion ::= apar exp cpar arrow alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    List<AstNode> aux = new ArrayList<>();
                    aux.add(a);
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aright), aux,b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declararFuncion ::= function apar listExp cpar alla listaSentencia clla 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> b = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new DeclararFuncionAstNode(new FileLocation(aleft, aright), a,b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declararFuncion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentReturn ::= returnn pComa 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReturnAstNode(new FileLocation(oleft, oright)) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentReturn",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentReturn ::= returnn exp endSent 
            {
              AstNode RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ReturnAstNode(new FileLocation(oleft, oright), a) ; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentReturn",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asignarFuncion ::= expLeft igual declararFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AssignFunctionAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignarFuncion",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= expLeft igual exp 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new AssignAstNode(new FileLocation(oleft, oright),a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= sentDoWhile endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= sentWhile 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= continuee endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new ContinueAstNode(new FileLocation(aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= sentSwitch 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= breakk endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new BreakAstNode(new FileLocation(aleft, aright)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= sentIf 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= sentReturn 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= asignarFuncion 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= invocarFuncion endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= asignacion endSent 
            {
              AstNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencias ::= sentencia 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode a = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencias ::= sentencias sentencia 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		AstNode b = (AstNode)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT= a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSentencia ::= 
            {
              List<AstNode> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaSentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSentencia ::= sentencias 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaSentencia",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= sentencias 
            {
              List<AstNode> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		List<AstNode> a = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		List<AstNode> start_val = (List<AstNode>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

